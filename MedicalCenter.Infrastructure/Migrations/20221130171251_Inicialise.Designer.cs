// <auto-generated />
using System;
using MedicalCenter.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalCenter.Infrastructure.Migrations
{
    [DbContext(typeof(MedicalCenterDbContext))]
    [Migration("20221130171251_Inicialise")]
    partial class Inicialise
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Administrator", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Egn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OutOnDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Administrators");

                    b.HasData(
                        new
                        {
                            Id = "e0b65a18-1271-4146-a730-8e80a24cea78",
                            Egn = "9305264209",
                            UserId = "d026cf1f-a334-41f4-a1b7-31b7a56b9f1b"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Egn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OutOnDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Representation")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SheduleId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SheduleId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = "4b95c2a0-314d-414d-a80a-db46ef2f810a",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7903129851",
                            ProfileImageUrl = "https://i.imgur.com/9gZeKsk.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 1,
                            UserId = "9da9587f-e28e-4289-a559-7407d3ea34a5"
                        },
                        new
                        {
                            Id = "22081bf0-1049-45ba-a9b3-3171271f1341",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7512150522",
                            ProfileImageUrl = "https://i.imgur.com/73peyhD.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 1,
                            UserId = "79fb8276-3bf8-4e70-9ac3-0e53a0d3a29e"
                        },
                        new
                        {
                            Id = "4775e4ac-4930-4113-bb19-6ed94e12fa24",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7412135099",
                            ProfileImageUrl = "https://i.imgur.com/66UFmBy.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 8,
                            UserId = "f1221132-3b9f-4f33-9e4d-1514bc0221e8"
                        },
                        new
                        {
                            Id = "499be402-5520-453d-a17d-3a52ac6ad798",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "8707015574",
                            ProfileImageUrl = "https://i.imgur.com/7VzO2Pm.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 8,
                            UserId = "da3da29d-5411-4750-a5c4-e4ae4e22965c"
                        },
                        new
                        {
                            Id = "f5628f68-e883-4b6a-8c6c-2511314af5a1",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "6902251307",
                            ProfileImageUrl = "https://i.imgur.com/oSv4hEn.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 11,
                            UserId = "b922fbb1-e1e8-41c6-a903-931e1cd4b845"
                        },
                        new
                        {
                            Id = "c96d7a14-8865-43bc-b756-8a6ad16b3cf4",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7904245096",
                            ProfileImageUrl = "https://i.imgur.com/2xoQC2H.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 11,
                            UserId = "3f9592ad-6af3-4021-808f-39d7aa9246e9"
                        },
                        new
                        {
                            Id = "473d0775-d1d3-4439-940b-fe949652859f",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "9107227892",
                            ProfileImageUrl = "https://i.imgur.com/yQmifbA.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 24,
                            UserId = "0bbf2307-d024-44b4-917f-a52ab9ddc013"
                        },
                        new
                        {
                            Id = "97fde454-7892-40ab-acff-c641b14d1eab",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7504196361",
                            ProfileImageUrl = "https://i.imgur.com/62LMUUe.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 24,
                            UserId = "cf6e7092-584c-460d-9538-feee4a5b53d9"
                        },
                        new
                        {
                            Id = "221de519-48d4-41cd-befd-1b414b2fea57",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "9401161818",
                            ProfileImageUrl = "https://i.imgur.com/LKNbRcV.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 31,
                            UserId = "f142f846-dbe7-420e-bbce-4a9f83e36980"
                        },
                        new
                        {
                            Id = "f40725ef-50bd-4b7b-b2ab-df41d875781e",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "8112144846",
                            ProfileImageUrl = "https://i.imgur.com/YK3Y8Ya.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 31,
                            UserId = "d3ba8e2c-1f0f-4879-86b0-372d1b0bc760"
                        },
                        new
                        {
                            Id = "182466cf-4d18-4ba4-940c-71e8f445335c",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7702262899",
                            ProfileImageUrl = "https://i.imgur.com/oFAixEu.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 44,
                            UserId = "8c1bcbb9-96f4-4e4e-8ec2-fc26fb79ddca"
                        },
                        new
                        {
                            Id = "17dcc03b-321f-4484-a96a-61f3b8fe6dc8",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "8707192482",
                            ProfileImageUrl = "https://i.imgur.com/E5Yga61.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 44,
                            UserId = "095da4be-9891-4cd9-a2ad-05dbbb0e2085"
                        },
                        new
                        {
                            Id = "d5adc893-6e93-4b1f-9ce5-7105069e7a6c",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7512152504",
                            ProfileImageUrl = "https://i.imgur.com/YO1cWgu.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 55,
                            UserId = "b67a1365-3902-4728-8c9f-05369b1556b7"
                        },
                        new
                        {
                            Id = "734a6dcd-060c-4108-a184-84997a5da2d1",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7512155144",
                            ProfileImageUrl = "https://i.imgur.com/42rKRT2.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 55,
                            UserId = "f092f500-00e2-4544-952a-4cb91320558d"
                        },
                        new
                        {
                            Id = "61f0536e-26ec-46cc-9386-1c7cb348f1e7",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7411033533",
                            ProfileImageUrl = "https://i.imgur.com/WkPS5Ds.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 60,
                            UserId = "c8517d67-c0f3-4cb8-ac8c-96602aaad8bb"
                        },
                        new
                        {
                            Id = "9c85bdfe-768b-43bc-bc3d-91d3565edd7a",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7609186138",
                            ProfileImageUrl = "https://i.imgur.com/2HO3b8v.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 60,
                            UserId = "041639c2-fcd2-4899-a5c6-2025cbb3c1c7"
                        },
                        new
                        {
                            Id = "5b0923f7-da08-4af1-a391-d0561a534a42",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "8606163716",
                            ProfileImageUrl = "https://i.imgur.com/GhnW3gD.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 75,
                            UserId = "c83d8295-ff6a-4644-a44a-c2bc294b220e"
                        },
                        new
                        {
                            Id = "9e38d1b5-6ba5-4e49-bbf0-7d893dd5b040",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "9002041303",
                            ProfileImageUrl = "https://i.imgur.com/fkXWOZT.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 75,
                            UserId = "8f052e1c-d7f5-40d4-9ee4-9c9f29a85ffe"
                        },
                        new
                        {
                            Id = "992d83f0-1439-40dc-95f4-5a708fd3c086",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7801138974",
                            ProfileImageUrl = "https://i.imgur.com/6NU5RvT.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 76,
                            UserId = "a8d60b9c-6bef-4eff-af47-bcce7daf311b"
                        },
                        new
                        {
                            Id = "cb55ad4a-e7c3-4cd6-8efb-6ccd3c369f4e",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "9103145306",
                            ProfileImageUrl = "https://i.imgur.com/f5yYnPN.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 76,
                            UserId = "7c513995-bed0-4be3-b768-304cd697c3f9"
                        },
                        new
                        {
                            Id = "be158f8c-bc22-4469-b01c-b9e928499a05",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7512158631",
                            ProfileImageUrl = "https://i.imgur.com/hx5EEMp.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 77,
                            UserId = "cd25b1ea-70c5-47d2-9617-3b7d0e6bc788"
                        },
                        new
                        {
                            Id = "4be5615e-0d14-4756-a090-bd157133f463",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7512158992",
                            ProfileImageUrl = "https://i.imgur.com/dj7NvUl.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 77,
                            UserId = "734267e9-a59b-44c3-baee-7e52a2bd1c29"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Examination", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DoctorPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserReviewedExamination")
                        .HasColumnType("bit");

                    b.Property<string>("ReviewId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SheduleId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("SheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Мъж"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Жена"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Не посочвам"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Laborant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Egn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OutOnDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Laborants");

                    b.HasData(
                        new
                        {
                            Id = "fb454478-8b7c-48bd-86b4-a0b36bf261a2",
                            Egn = "8412194792",
                            UserId = "fb454478-8b7c-48bd-86b4-a0b36bf261a2"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.LaboratoryPatient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Egn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("LaboratoryPatients");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Shedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Shedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Първа смяна"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Втора смяна"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Акушер-гинеколог"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Алерголог"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Алтернативна медицина"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ангиолог"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Анестезиолог"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Боуен терапевт"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Вирусолог"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Вътрешни болести"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Гастроентеролог"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Гръден хирург"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Дерматолог"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Детски гастроентеролог"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Детски ендокринолог"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Детски кардиолог"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Детски невролог"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Детски нефролог"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Детски психиатър"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Детски пулмолог"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Детски ревматолог"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Детски хематолог"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Детски хирург"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Диетолог"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Ендодонт"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Ендокринолог"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Естетичен дерматолог"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Зъболекар (Стоматолог)"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Изследване"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Имплантолог"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Имунолог"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Инфекциозни болести"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Кардиолог"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Кардиохирург"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Кинезитерапевт"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Клинична лаборатория"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Коуч"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Лицево-челюстен хирург"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Логопед"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Лъчетерапевт"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Мамолог"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Манипулация"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Медицинска генетика"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Медицинска сестра"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Микробиолог"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Невролог"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Неврохирург"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Неонатолог"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Нефролог (Бъбречни болести)"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Образна диагностика"
                        },
                        new
                        {
                            Id = 49,
                            Name = "бщопрактикуващ лекар"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Озонотерапевт"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Онколог"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Оптометрист (Очен оптик)"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Орален хирург"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Ортодонт"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Ортопед"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Отоневролог"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Офталмолог (Очен лекар)"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Паразитолог"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Пародонтолог"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Педиатър"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Пластичен хирург"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Подиатър (Болести на ходилото)"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Протетик"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Профилактични прегледи"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Психиатър"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Психолог"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Психотерапевт"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Пулмолог (Белодробни болести)"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Ревматолог"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Репродуктивна медицина"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Рехабилитатор"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Спортна медицина"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Съдов хирург"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Токсиколог"
                        },
                        new
                        {
                            Id = 75,
                            Name = "УНГ"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Уролог"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Физиотерапевт"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Хематолог (Клинична хематология)"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Хематолог (Трансфузионна хематология)"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Хирург"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Хомеопат"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Test", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Hct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hgb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaboratoryPatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MCH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MCHC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MCV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RBC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrineGravity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrinepH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WBC")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryPatientId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AdministratorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOutOfCompany")
                        .HasColumnType("bit");

                    b.Property<string>("JoinOnDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaborantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaboratoryPatientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d026cf1f-a334-41f4-a1b7-31b7a56b9f1b",
                            AccessFailedCount = 0,
                            AdministratorId = "e0b65a18-1271-4146-a730-8e80a24cea78",
                            ConcurrencyStamp = "b46254a5-6df8-43ae-8219-a71bbdce1d31",
                            Email = "admin@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Ивайло",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Илиев",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MC-BG.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFUfngUe8U/LEV+GFqdSN9A9ibr/9ZRhwBH9Lal5MxAKLEX6/Tt9Bgah7zgZm+Vqzw==",
                            PhoneNumber = "+359888888888",
                            PhoneNumberConfirmed = false,
                            Role = "Administrator",
                            SecurityStamp = "2bed4cba-b6b4-4b58-a95c-bb839c899c9c",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "9da9587f-e28e-4289-a559-7407d3ea34a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98c7f800-55cc-4e25-93a6-55e6e0de61b0",
                            DoctorId = "4b95c2a0-314d-414d-a80a-db46ef2f810a",
                            Email = "m_monastirska@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Маргарита",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Монастирска",
                            LockoutEnabled = false,
                            NormalizedEmail = "M_MONASTIRSKA@MC-BG.COM",
                            NormalizedUserName = "M_MONASTIRSKA",
                            PasswordHash = "AQAAAAEAACcQAAAAEFM6s8AliTGNbayx9ddFu/1It71GK2QIkPEu4huri28+ObWlRpsHhUEfhSRvzymlDQ==",
                            PhoneNumber = "+359888888100",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "b210546b-2ade-47a9-9710-8ca6f46d33ee",
                            TwoFactorEnabled = false,
                            UserName = "m_monastirska"
                        },
                        new
                        {
                            Id = "79fb8276-3bf8-4e70-9ac3-0e53a0d3a29e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd015a40-7e2e-4cc6-8f6f-e74f7fcd2611",
                            DoctorId = "22081bf0-1049-45ba-a9b3-3171271f1341",
                            Email = "s_slavchev@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Станислав",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Славчев",
                            LockoutEnabled = false,
                            NormalizedEmail = "S_SLAVCHEV@MC-BG.COM",
                            NormalizedUserName = "S_SLAVCHEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEAKIP72sAiiqkoBCdUudsdjWQAkqZx8fF1fY7UL6xRsKQLMaWjlmFGe2cL9ht2Dbsw==",
                            PhoneNumber = "+359888888101",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "78fc9de7-a9f4-495f-9faf-593cd8a2c394",
                            TwoFactorEnabled = false,
                            UserName = "s_slavchev"
                        },
                        new
                        {
                            Id = "f1221132-3b9f-4f33-9e4d-1514bc0221e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6794c5a3-54f7-432c-8ce1-0f4980b16f87",
                            DoctorId = "4775e4ac-4930-4113-bb19-6ed94e12fa24",
                            Email = "b_petkova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Бисерка",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Петкова",
                            LockoutEnabled = false,
                            NormalizedEmail = "B_PETKOVA@MC-BG.COM",
                            NormalizedUserName = "B_PETKOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAECnzu59vCzNlfBbA2MPVUSzJ07JXDkY0y48XuVZPrXOmBuf47zXJsd0ZcGtz9Bearg==",
                            PhoneNumber = "+359888888102",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "db24aea3-d4be-453e-87b2-6b8cdbc96950",
                            TwoFactorEnabled = false,
                            UserName = "b_petkova"
                        },
                        new
                        {
                            Id = "da3da29d-5411-4750-a5c4-e4ae4e22965c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0002213b-27df-4389-b4eb-60c9bb70cc89",
                            DoctorId = "499be402-5520-453d-a17d-3a52ac6ad798",
                            Email = "m_velikova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Мими",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Великова",
                            LockoutEnabled = false,
                            NormalizedEmail = "M_VELIKOVA@MC-BG.COM",
                            NormalizedUserName = "M_VELIKOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAECSmsTTN+a17DZDvL5kjISJ/7qpI/HTqOX4WqAoiq2AuIoMKqS7f2vAxy2xvLlBL3g==",
                            PhoneNumber = "+359888888103",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "20e4ae1c-86ac-4ab6-8214-7f6056140c43",
                            TwoFactorEnabled = false,
                            UserName = "m_velikova"
                        },
                        new
                        {
                            Id = "b922fbb1-e1e8-41c6-a903-931e1cd4b845",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dac2099c-53ca-4d68-9e50-2c3e1bc3ede6",
                            DoctorId = "f5628f68-e883-4b6a-8c6c-2511314af5a1",
                            Email = "t_stoev@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Тодор",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Стоев",
                            LockoutEnabled = false,
                            NormalizedEmail = "T_STOEV@MC-BG.COM",
                            NormalizedUserName = "T_STOEV",
                            PasswordHash = "AQAAAAEAACcQAAAAENyUjrzXpR3q1vfijXPXoonZ1Z9jHUm/HqZ7foBnUCmc8xnVzRxO1kU4VV9EsK6g1w==",
                            PhoneNumber = "+359888888104",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "300d0670-9eb1-4054-a9f4-40bbbbb1688c",
                            TwoFactorEnabled = false,
                            UserName = "t_stoev"
                        },
                        new
                        {
                            Id = "3f9592ad-6af3-4021-808f-39d7aa9246e9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a2fac37-e758-448a-b7fa-41739964722a",
                            DoctorId = "c96d7a14-8865-43bc-b756-8a6ad16b3cf4",
                            Email = "m_blagoeva@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Мая",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Благоева",
                            LockoutEnabled = false,
                            NormalizedEmail = "M_BLAGOEVA@MC-BG.COM",
                            NormalizedUserName = "M_BLAGOEVA",
                            PasswordHash = "AQAAAAEAACcQAAAAELKqvzceXQlZnkL5ar1vpe7iU35vNZXHrxYbJqjJRqVnn3lKqPuKY+tWd6vrWWZSfA==",
                            PhoneNumber = "+359888888105",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "ed85e1f9-021f-42a0-9ab2-3d4b39fec924",
                            TwoFactorEnabled = false,
                            UserName = "m_blagoeva"
                        },
                        new
                        {
                            Id = "0bbf2307-d024-44b4-917f-a52ab9ddc013",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ebdeee4-a6fb-4516-b1f5-de2d524f0fe4",
                            DoctorId = "473d0775-d1d3-4439-940b-fe949652859f",
                            Email = "m_kalinkova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Мария",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Калинкова",
                            LockoutEnabled = false,
                            NormalizedEmail = "M_KALINKOVA@MC-BG.COM",
                            NormalizedUserName = "M_KALINKOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEK72Uf4sIQTUZaGdKI/INlZ9gfbyQK0qnb/XVKjLiCK8hcCJ0C3S71zfGadVOY4uxA==",
                            PhoneNumber = "+359888888106",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "00d66d2c-7a3e-4a7c-907e-7c4aa1da95a2",
                            TwoFactorEnabled = false,
                            UserName = "m_kalinkova"
                        },
                        new
                        {
                            Id = "cf6e7092-584c-460d-9538-feee4a5b53d9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22f3f316-58ea-40ba-8917-0d473596fd8c",
                            DoctorId = "97fde454-7892-40ab-acff-c641b14d1eab",
                            Email = "d_georgiev@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Димитър",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Георгиев",
                            LockoutEnabled = false,
                            NormalizedEmail = "D_GEORGIEV@MC-BG.COM",
                            NormalizedUserName = "D_GEORGIEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEDBsbXtjxJP+SmT52U84+Vc/R3+qA1OeAkpWV7PCoAFMZp3li1i5TTSPUOi6cKbusw==",
                            PhoneNumber = "+359888888107",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "97b57e3f-0a8a-4b3f-ac4b-bc3f9459981e",
                            TwoFactorEnabled = false,
                            UserName = "d_georgiev"
                        },
                        new
                        {
                            Id = "f142f846-dbe7-420e-bbce-4a9f83e36980",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bec9d1c7-ba1e-42fa-8dcd-2c36c1e8cd62",
                            DoctorId = "221de519-48d4-41cd-befd-1b414b2fea57",
                            Email = "r_ruseva@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Ралица",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Русева",
                            LockoutEnabled = false,
                            NormalizedEmail = "R_RUSEVA@MC-BG.COM",
                            NormalizedUserName = "R_RUSEVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEBB7v5bDZjYpkI9X03VZU5R85T6K9P0h2wnHOH6GtD2SkG/iJgQgZNBX5+7Aael9ug==",
                            PhoneNumber = "+359888888108",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "68c3a746-d684-4a36-9af8-f45328f1a5c7",
                            TwoFactorEnabled = false,
                            UserName = "r_ruseva"
                        },
                        new
                        {
                            Id = "d3ba8e2c-1f0f-4879-86b0-372d1b0bc760",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a860d8a1-5fc7-4639-b92b-761ff260ca18",
                            DoctorId = "f40725ef-50bd-4b7b-b2ab-df41d875781e",
                            Email = "s_tochev@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Сотир",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Точев",
                            LockoutEnabled = false,
                            NormalizedEmail = "S_TOCHEV@MC-BG.COM",
                            NormalizedUserName = "S_TOCHEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEKNUr2mBr6Pku1IBhmbgKUy1ag8gso9CF+Hzbpoz1B/uN2WECun3lNrMN0LzzohkOg==",
                            PhoneNumber = "+359888888109",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "ec3b097f-00a5-479a-803a-66db51010086",
                            TwoFactorEnabled = false,
                            UserName = "s_tochev"
                        },
                        new
                        {
                            Id = "8c1bcbb9-96f4-4e4e-8ec2-fc26fb79ddca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35b7735e-0368-4bd5-89cb-3ccb98332789",
                            DoctorId = "182466cf-4d18-4ba4-940c-71e8f445335c",
                            Email = "s_atanasova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Стела",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Атанасова",
                            LockoutEnabled = false,
                            NormalizedEmail = "S_ATANASOVA@MC-BG.COM",
                            NormalizedUserName = "S_ATANASOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEMJLA41dNvJHs5DbBPvLMA9BZ2coUHV+65O84MTb3yFUXHNr4jKy7n36p/SAFSFEoQ==",
                            PhoneNumber = "+359888888110",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "6cc1c56a-489a-4470-b1c7-b1e89a75fd5c",
                            TwoFactorEnabled = false,
                            UserName = "s_atanasova"
                        },
                        new
                        {
                            Id = "095da4be-9891-4cd9-a2ad-05dbbb0e2085",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09dd4ae8-82d7-4799-9061-080c2ecc2af6",
                            DoctorId = "17dcc03b-321f-4484-a96a-61f3b8fe6dc8",
                            Email = "r_ikonomov@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Росен",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Икономов",
                            LockoutEnabled = false,
                            NormalizedEmail = "R_IKONOMOV@MC-BG.COM",
                            NormalizedUserName = "R_IKONOMOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEHRXJXp/HF0iIbcVq9+9Xez4ipDlCtxPxbIkuaLT67D7UgsCOOSurFOui1BxCVeeDg==",
                            PhoneNumber = "+359888888111",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "ee619d10-9228-476c-adb4-e64139eeb3e4",
                            TwoFactorEnabled = false,
                            UserName = "r_ikonomov"
                        },
                        new
                        {
                            Id = "b67a1365-3902-4728-8c9f-05369b1556b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe1e321d-fc45-43ed-8747-b73d90c302ee",
                            DoctorId = "d5adc893-6e93-4b1f-9ce5-7105069e7a6c",
                            Email = "m_vuldjev@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Михаил",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Вулджев",
                            LockoutEnabled = false,
                            NormalizedEmail = "M_VULDJEV@MC-BG.COM",
                            NormalizedUserName = "M_VULDJEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEBv/Jg+SGdO65cnwxjD3pigRou7/lmg4+1p9w4yNDeGNw9tq1Xnxttu6vhKEb5KgnQ==",
                            PhoneNumber = "+359888888112",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "14f07876-9c2a-4026-803f-2901928ba937",
                            TwoFactorEnabled = false,
                            UserName = "m_vuldjev"
                        },
                        new
                        {
                            Id = "f092f500-00e2-4544-952a-4cb91320558d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73e4ddb1-5d42-40f1-8790-4eafd2a470bf",
                            DoctorId = "734a6dcd-060c-4108-a184-84997a5da2d1",
                            Email = "h_hristov@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Христо",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Христов",
                            LockoutEnabled = false,
                            NormalizedEmail = "H_HRISTOV@MC-BG.COM",
                            NormalizedUserName = "H_HRISTOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEM1t0CDciPu7qNeHSXLz+leekmmzIEpfijAd9kuEnY5wwl+a3vSFaDIZ+gptVgx7dg==",
                            PhoneNumber = "+359888888113",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "9d8556a5-1583-44a2-89f1-d86a1062a06e",
                            TwoFactorEnabled = false,
                            UserName = "h_hristov"
                        },
                        new
                        {
                            Id = "c8517d67-c0f3-4cb8-ac8c-96602aaad8bb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c76cd28c-393d-43a9-a13b-ec227e11fd4a",
                            DoctorId = "61f0536e-26ec-46cc-9386-1c7cb348f1e7",
                            Email = "a_tomova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Антония",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Томова",
                            LockoutEnabled = false,
                            NormalizedEmail = "A_TOMOVA@MC-BG.COM",
                            NormalizedUserName = "A_TOMOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEFfOCWijwFAQYAmzwUK9I4TyGE79z+VpBBEJLzJ7SqeGns3OM7YPrp6TV6lO9DuUqg==",
                            PhoneNumber = "+359888888114",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "9a47c23b-b9e3-4197-a314-3c6268eeb34d",
                            TwoFactorEnabled = false,
                            UserName = "a_tomova"
                        },
                        new
                        {
                            Id = "041639c2-fcd2-4899-a5c6-2025cbb3c1c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ac919a6-4809-4fe0-b574-73494d76de37",
                            DoctorId = "9c85bdfe-768b-43bc-bc3d-91d3565edd7a",
                            Email = "k_moskova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Катерина",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Москова",
                            LockoutEnabled = false,
                            NormalizedEmail = "K_MOSKOVA@MC-BG.COM",
                            NormalizedUserName = "K_MOSKOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEC65J7oRo+HHpT7+eDWlxgJrbE7t74HCvxDnbcb01v79kvsWqeAvi9j82pOtsGPLfw==",
                            PhoneNumber = "+359888888115",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "47d4d6d6-bd56-40cd-be11-f1eb6dd5fa6a",
                            TwoFactorEnabled = false,
                            UserName = "k_moskova"
                        },
                        new
                        {
                            Id = "c83d8295-ff6a-4644-a44a-c2bc294b220e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d932d71-1fcf-4edb-b35a-c82281badec9",
                            DoctorId = "5b0923f7-da08-4af1-a391-d0561a534a42",
                            Email = "k_atanasova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Кристина",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Атанасова",
                            LockoutEnabled = false,
                            NormalizedEmail = "K_ATANASOVA@MC-BG.COM",
                            NormalizedUserName = "K_ATANASOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEG+9hxTIJBTnREAeQ8yroILDGyfw7dlr/yjmZydNYi3AKmTYOS71oQ/BxqZ1NiKdlQ==",
                            PhoneNumber = "+359888888116",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "2dcbb35f-2fb4-466f-84e3-15d12512227b",
                            TwoFactorEnabled = false,
                            UserName = "k_atanasova"
                        },
                        new
                        {
                            Id = "8f052e1c-d7f5-40d4-9ee4-9c9f29a85ffe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "312d5d4b-637a-43a7-b0a0-bc17fd454c01",
                            DoctorId = "9e38d1b5-6ba5-4e49-bbf0-7d893dd5b040",
                            Email = "g_kuchukov@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Георги",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Кичуков",
                            LockoutEnabled = false,
                            NormalizedEmail = "G_KUCHUKOV@MC-BG.COM",
                            NormalizedUserName = "G_KUCHUKOV",
                            PasswordHash = "AQAAAAEAACcQAAAAELUS8CC7LJCttkaafEUzjkLHg+OXldcZJc5NX1NJlKOhsRvZo0BlGHoeGxCIBh8RjQ==",
                            PhoneNumber = "+359888888117",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "bdb947e7-3972-49e4-a897-7d983b3e1556",
                            TwoFactorEnabled = false,
                            UserName = "g_kuchukov"
                        },
                        new
                        {
                            Id = "a8d60b9c-6bef-4eff-af47-bcce7daf311b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8fca13f-5935-41a0-82b4-dadeb104c358",
                            DoctorId = "992d83f0-1439-40dc-95f4-5a708fd3c086",
                            Email = "k_stoicheva@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Катина",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Стойчева",
                            LockoutEnabled = false,
                            NormalizedEmail = "K_STOICHEVA@MC-BG.COM",
                            NormalizedUserName = "K_STOICHEVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEHtyOVT/bwKoTi8baj57raEJBA5249vQASOrbAa5jpOkRMe24qCOoVyldQ4lMzRKCQ==",
                            PhoneNumber = "+359888888118",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "53215ad4-e711-4bd8-ac7e-ac5cf8326483",
                            TwoFactorEnabled = false,
                            UserName = "k_stoicheva"
                        },
                        new
                        {
                            Id = "7c513995-bed0-4be3-b768-304cd697c3f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c1a4c2b-f67f-4d02-8b2f-057ca50ffc28",
                            DoctorId = "cb55ad4a-e7c3-4cd6-8efb-6ccd3c369f4e",
                            Email = "n_paskov@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Николай",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Пасков",
                            LockoutEnabled = false,
                            NormalizedEmail = "N_PASKOV@MC-BG.COM",
                            NormalizedUserName = "N_PASKOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEK12BZolB6WOhkqGurMDuIoBzAI/oENQGMEJwhyP9L8emyT72wprCrUHB0RFM3NRsg==",
                            PhoneNumber = "+359888888119",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "2169bcdd-f4e8-4720-a015-3a6b243698f5",
                            TwoFactorEnabled = false,
                            UserName = "n_paskov"
                        },
                        new
                        {
                            Id = "cd25b1ea-70c5-47d2-9617-3b7d0e6bc788",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a769b82d-2127-4d5b-b881-282909e36304",
                            DoctorId = "be158f8c-bc22-4469-b01c-b9e928499a05",
                            Email = "r_uzunova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Росица",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Узунова",
                            LockoutEnabled = false,
                            NormalizedEmail = "R_UZUNOVA@MC-BG.COM",
                            NormalizedUserName = "R_UZUNOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEPB9aS6ih6UMJhwS7QGb8K77NzWGhfEaboM37AAwtwdQEjPGFjdM4OTeYAvTzpyR7w==",
                            PhoneNumber = "+359888888120",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "4b5b37a6-40b8-4123-b202-b0eb515deb5a",
                            TwoFactorEnabled = false,
                            UserName = "r_uzunova"
                        },
                        new
                        {
                            Id = "734267e9-a59b-44c3-baee-7e52a2bd1c29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bff468b3-97d8-4331-b4ed-ab67b960d6cd",
                            DoctorId = "4be5615e-0d14-4756-a090-bd157133f463",
                            Email = "i_belcheva@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Ирина",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Белчева",
                            LockoutEnabled = false,
                            NormalizedEmail = "I_BELCHEVA@MC-BG.COM",
                            NormalizedUserName = "I_BELCHEVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEGua8ovs1KJsWcdwcGgWF7uJYVxtgHAWowTTV+0aDwaElbj9fQsFdcUb3JoZCbOXKw==",
                            PhoneNumber = "+359888888121",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "ee924d66-0e88-477a-947e-11d50deb76e1",
                            TwoFactorEnabled = false,
                            UserName = "i_belcheva"
                        },
                        new
                        {
                            Id = "fb454478-8b7c-48bd-86b4-a0b36bf261a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "accd6d37-b9a9-4aa0-9136-95a5e0f6822c",
                            Email = "lab_vivanova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Ваня",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LaborantId = "fb454478-8b7c-48bd-86b4-a0b36bf261a2",
                            LastName = "Иванова",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAB_VIVANOVA@MC-BG.COM",
                            NormalizedUserName = "LAB_VIVANOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAELq7XrJ1TotHoFyi0Ilf1nQufj+EckvSHZgVd+xyXWHGDKFjzEkoibntCI0vsELSYQ==",
                            PhoneNumber = "+359888888881",
                            PhoneNumberConfirmed = false,
                            Role = "Laborant",
                            SecurityStamp = "263cae44-7417-4da5-bc12-3f5da6ab040b",
                            TwoFactorEnabled = false,
                            UserName = "lab_vivanova"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.WorkHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SheduleId");

                    b.ToTable("WorkHours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Hour = "08:00",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Hour = "08:30",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 3,
                            Hour = "09:00",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 4,
                            Hour = "09:30",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 5,
                            Hour = "10:00",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 6,
                            Hour = "10:30",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 7,
                            Hour = "11:00",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 8,
                            Hour = "11:30",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 9,
                            Hour = "13:00",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 10,
                            Hour = "13:30",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 11,
                            Hour = "14:00",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 12,
                            Hour = "14:30",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 13,
                            Hour = "15:00",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 14,
                            Hour = "15:30",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 15,
                            Hour = "16:00",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 16,
                            Hour = "16:30",
                            SheduleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "32d19b1e-b575-488e-860b-18eb1dbec58d",
                            ConcurrencyStamp = "ef9edcdd-168f-411d-aa66-e143b0b329c4",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "485b1cfe-2066-4b04-9de3-716683e92111",
                            ConcurrencyStamp = "62aafbe3-5fbd-4a8c-a7f4-5dc14b9e3410",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "a0f47389-4c6b-4590-8480-6beb741d2c3e",
                            ConcurrencyStamp = "1ff4d815-1623-4044-8484-7b41a1fd8e97",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "30d8b959-5d2a-4399-a252-5f0e36664bc3",
                            ConcurrencyStamp = "94f384ec-3288-44fb-8dcf-6f349e9ce6ee",
                            Name = "Laborant",
                            NormalizedName = "LABORANT"
                        },
                        new
                        {
                            Id = "706c269e-4eda-425f-87c2-829eec6cb202",
                            ConcurrencyStamp = "0683211c-ebcc-46e0-b94f-db537a6ca059",
                            Name = "LaboratoryUser",
                            NormalizedName = "LABORATORYUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d026cf1f-a334-41f4-a1b7-31b7a56b9f1b",
                            RoleId = "32d19b1e-b575-488e-860b-18eb1dbec58d"
                        },
                        new
                        {
                            UserId = "9da9587f-e28e-4289-a559-7407d3ea34a5",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "79fb8276-3bf8-4e70-9ac3-0e53a0d3a29e",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "f1221132-3b9f-4f33-9e4d-1514bc0221e8",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "da3da29d-5411-4750-a5c4-e4ae4e22965c",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "b922fbb1-e1e8-41c6-a903-931e1cd4b845",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "3f9592ad-6af3-4021-808f-39d7aa9246e9",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "0bbf2307-d024-44b4-917f-a52ab9ddc013",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "cf6e7092-584c-460d-9538-feee4a5b53d9",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "f142f846-dbe7-420e-bbce-4a9f83e36980",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "d3ba8e2c-1f0f-4879-86b0-372d1b0bc760",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "8c1bcbb9-96f4-4e4e-8ec2-fc26fb79ddca",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "095da4be-9891-4cd9-a2ad-05dbbb0e2085",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "b67a1365-3902-4728-8c9f-05369b1556b7",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "f092f500-00e2-4544-952a-4cb91320558d",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "c8517d67-c0f3-4cb8-ac8c-96602aaad8bb",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "041639c2-fcd2-4899-a5c6-2025cbb3c1c7",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "c83d8295-ff6a-4644-a44a-c2bc294b220e",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "8f052e1c-d7f5-40d4-9ee4-9c9f29a85ffe",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "a8d60b9c-6bef-4eff-af47-bcce7daf311b",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "7c513995-bed0-4be3-b768-304cd697c3f9",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "cd25b1ea-70c5-47d2-9617-3b7d0e6bc788",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "734267e9-a59b-44c3-baee-7e52a2bd1c29",
                            RoleId = "485b1cfe-2066-4b04-9de3-716683e92111"
                        },
                        new
                        {
                            UserId = "fb454478-8b7c-48bd-86b4-a0b36bf261a2",
                            RoleId = "30d8b959-5d2a-4399-a252-5f0e36664bc3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Administrator", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithOne("Administrator")
                        .HasForeignKey("MedicalCenter.Infrastructure.Data.Models.Administrator", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Doctor", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Shedule", "Shedule")
                        .WithMany("Doctors")
                        .HasForeignKey("SheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Specialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("MedicalCenter.Infrastructure.Data.Models.Doctor", "UserId");

                    b.Navigation("Shedule");

                    b.Navigation("Specialty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Examination", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorExaminations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId");

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Shedule", "Shedule")
                        .WithMany()
                        .HasForeignKey("SheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithMany("UserExaminations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Review");

                    b.Navigation("Shedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Laborant", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithOne("Laborant")
                        .HasForeignKey("MedicalCenter.Infrastructure.Data.Models.Laborant", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.LaboratoryPatient", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithOne("LaboratoryPatient")
                        .HasForeignKey("MedicalCenter.Infrastructure.Data.Models.LaboratoryPatient", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Review", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorReviews")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithMany("UserReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Test", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.LaboratoryPatient", "LaboratoryPatient")
                        .WithMany("Tests")
                        .HasForeignKey("LaboratoryPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaboratoryPatient");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.WorkHour", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Shedule", "Shedule")
                        .WithMany("WorkHours")
                        .HasForeignKey("SheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Shedule");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Doctor", b =>
                {
                    b.Navigation("DoctorExaminations");

                    b.Navigation("DoctorReviews");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.LaboratoryPatient", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Shedule", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("WorkHours");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Specialty", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.User", b =>
                {
                    b.Navigation("Administrator");

                    b.Navigation("Doctor");

                    b.Navigation("Laborant");

                    b.Navigation("LaboratoryPatient");

                    b.Navigation("UserExaminations");

                    b.Navigation("UserReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
