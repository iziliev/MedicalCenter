// <auto-generated />
using System;
using MedicalCenter.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalCenter.Infrastructure.Migrations
{
    [DbContext(typeof(MedicalCenterDbContext))]
    [Migration("20221208085836_Inicialise")]
    partial class Inicialise
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Administrator", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Egn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OutOnDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Administrators");

                    b.HasData(
                        new
                        {
                            Id = "e0b65a18-1271-4146-a730-8e80a24cea78",
                            Egn = "9305264209",
                            UserId = "d026cf1f-a334-41f4-a1b7-31b7a56b9f1b"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Egn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OutOnDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Representation")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SheduleId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SheduleId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = "4b95c2a0-314d-414d-a80a-db46ef2f810a",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7903129851",
                            ProfileImageUrl = "https://i.imgur.com/9gZeKsk.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 1,
                            UserId = "9da9587f-e28e-4289-a559-7407d3ea34a5"
                        },
                        new
                        {
                            Id = "22081bf0-1049-45ba-a9b3-3171271f1341",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7512150522",
                            ProfileImageUrl = "https://i.imgur.com/73peyhD.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 2,
                            SpecialtyId = 1,
                            UserId = "79fb8276-3bf8-4e70-9ac3-0e53a0d3a29e"
                        },
                        new
                        {
                            Id = "4775e4ac-4930-4113-bb19-6ed94e12fa24",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7412135099",
                            ProfileImageUrl = "https://i.imgur.com/66UFmBy.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 8,
                            UserId = "f1221132-3b9f-4f33-9e4d-1514bc0221e8"
                        },
                        new
                        {
                            Id = "499be402-5520-453d-a17d-3a52ac6ad798",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "8707015574",
                            ProfileImageUrl = "https://i.imgur.com/7VzO2Pm.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 2,
                            SpecialtyId = 8,
                            UserId = "da3da29d-5411-4750-a5c4-e4ae4e22965c"
                        },
                        new
                        {
                            Id = "f5628f68-e883-4b6a-8c6c-2511314af5a1",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "6902251307",
                            ProfileImageUrl = "https://i.imgur.com/oSv4hEn.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 11,
                            UserId = "b922fbb1-e1e8-41c6-a903-931e1cd4b845"
                        },
                        new
                        {
                            Id = "c96d7a14-8865-43bc-b756-8a6ad16b3cf4",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7904245096",
                            ProfileImageUrl = "https://i.imgur.com/2xoQC2H.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 2,
                            SpecialtyId = 11,
                            UserId = "3f9592ad-6af3-4021-808f-39d7aa9246e9"
                        },
                        new
                        {
                            Id = "473d0775-d1d3-4439-940b-fe949652859f",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "9107227892",
                            ProfileImageUrl = "https://i.imgur.com/yQmifbA.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 24,
                            UserId = "0bbf2307-d024-44b4-917f-a52ab9ddc013"
                        },
                        new
                        {
                            Id = "97fde454-7892-40ab-acff-c641b14d1eab",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7504196361",
                            ProfileImageUrl = "https://i.imgur.com/62LMUUe.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 2,
                            SpecialtyId = 24,
                            UserId = "cf6e7092-584c-460d-9538-feee4a5b53d9"
                        },
                        new
                        {
                            Id = "221de519-48d4-41cd-befd-1b414b2fea57",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "9401161818",
                            ProfileImageUrl = "https://i.imgur.com/LKNbRcV.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 31,
                            UserId = "f142f846-dbe7-420e-bbce-4a9f83e36980"
                        },
                        new
                        {
                            Id = "f40725ef-50bd-4b7b-b2ab-df41d875781e",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "8112144846",
                            ProfileImageUrl = "https://i.imgur.com/YK3Y8Ya.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 2,
                            SpecialtyId = 31,
                            UserId = "d3ba8e2c-1f0f-4879-86b0-372d1b0bc760"
                        },
                        new
                        {
                            Id = "182466cf-4d18-4ba4-940c-71e8f445335c",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7702262899",
                            ProfileImageUrl = "https://i.imgur.com/oFAixEu.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 44,
                            UserId = "8c1bcbb9-96f4-4e4e-8ec2-fc26fb79ddca"
                        },
                        new
                        {
                            Id = "17dcc03b-321f-4484-a96a-61f3b8fe6dc8",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "8707192482",
                            ProfileImageUrl = "https://i.imgur.com/E5Yga61.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 2,
                            SpecialtyId = 44,
                            UserId = "095da4be-9891-4cd9-a2ad-05dbbb0e2085"
                        },
                        new
                        {
                            Id = "d5adc893-6e93-4b1f-9ce5-7105069e7a6c",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7512152504",
                            ProfileImageUrl = "https://i.imgur.com/YO1cWgu.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 55,
                            UserId = "b67a1365-3902-4728-8c9f-05369b1556b7"
                        },
                        new
                        {
                            Id = "734a6dcd-060c-4108-a184-84997a5da2d1",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7512155144",
                            ProfileImageUrl = "https://i.imgur.com/42rKRT2.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 2,
                            SpecialtyId = 55,
                            UserId = "f092f500-00e2-4544-952a-4cb91320558d"
                        },
                        new
                        {
                            Id = "61f0536e-26ec-46cc-9386-1c7cb348f1e7",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7411033533",
                            ProfileImageUrl = "https://i.imgur.com/WkPS5Ds.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 60,
                            UserId = "c8517d67-c0f3-4cb8-ac8c-96602aaad8bb"
                        },
                        new
                        {
                            Id = "9c85bdfe-768b-43bc-bc3d-91d3565edd7a",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7609186138",
                            ProfileImageUrl = "https://i.imgur.com/2HO3b8v.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 2,
                            SpecialtyId = 60,
                            UserId = "041639c2-fcd2-4899-a5c6-2025cbb3c1c7"
                        },
                        new
                        {
                            Id = "5b0923f7-da08-4af1-a391-d0561a534a42",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "8606163716",
                            ProfileImageUrl = "https://i.imgur.com/GhnW3gD.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 75,
                            UserId = "c83d8295-ff6a-4644-a44a-c2bc294b220e"
                        },
                        new
                        {
                            Id = "9e38d1b5-6ba5-4e49-bbf0-7d893dd5b040",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "9002041303",
                            ProfileImageUrl = "https://i.imgur.com/fkXWOZT.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 2,
                            SpecialtyId = 75,
                            UserId = "8f052e1c-d7f5-40d4-9ee4-9c9f29a85ffe"
                        },
                        new
                        {
                            Id = "992d83f0-1439-40dc-95f4-5a708fd3c086",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7801138974",
                            ProfileImageUrl = "https://i.imgur.com/6NU5RvT.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 76,
                            UserId = "a8d60b9c-6bef-4eff-af47-bcce7daf311b"
                        },
                        new
                        {
                            Id = "cb55ad4a-e7c3-4cd6-8efb-6ccd3c369f4e",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "9103145306",
                            ProfileImageUrl = "https://i.imgur.com/f5yYnPN.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 2,
                            SpecialtyId = 76,
                            UserId = "7c513995-bed0-4be3-b768-304cd697c3f9"
                        },
                        new
                        {
                            Id = "be158f8c-bc22-4469-b01c-b9e928499a05",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7512158631",
                            ProfileImageUrl = "https://i.imgur.com/hx5EEMp.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 77,
                            UserId = "cd25b1ea-70c5-47d2-9617-3b7d0e6bc788"
                        },
                        new
                        {
                            Id = "4be5615e-0d14-4756-a090-bd157133f463",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7512158992",
                            ProfileImageUrl = "https://i.imgur.com/dj7NvUl.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 2,
                            SpecialtyId = 77,
                            UserId = "734267e9-a59b-44c3-baee-7e52a2bd1c29"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Examination", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DoctorPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserReviewedExamination")
                        .HasColumnType("bit");

                    b.Property<string>("ReviewId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SheduleId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("SheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Мъж"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Жена"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Не посочвам"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Laborant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Egn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OutOnDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Laborants");

                    b.HasData(
                        new
                        {
                            Id = "fb454478-8b7c-48bd-86b4-a0b36bf261a2",
                            Egn = "8412194792",
                            UserId = "fb454478-8b7c-48bd-86b4-a0b36bf261a2"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.LaboratoryPatient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Egn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("LaboratoryPatients");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Shedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Shedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Първа смяна"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Втора смяна"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Акушер-гинеколог"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Алерголог"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Алтернативна медицина"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ангиолог"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Анестезиолог"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Боуен терапевт"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Вирусолог"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Вътрешни болести"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Гастроентеролог"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Гръден хирург"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Дерматолог"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Детски гастроентеролог"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Детски ендокринолог"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Детски кардиолог"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Детски невролог"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Детски нефролог"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Детски психиатър"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Детски пулмолог"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Детски ревматолог"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Детски хематолог"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Детски хирург"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Диетолог"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Ендодонт"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Ендокринолог"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Естетичен дерматолог"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Зъболекар (Стоматолог)"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Изследване"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Имплантолог"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Имунолог"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Инфекциозни болести"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Кардиолог"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Кардиохирург"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Кинезитерапевт"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Клинична лаборатория"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Коуч"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Лицево-челюстен хирург"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Логопед"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Лъчетерапевт"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Мамолог"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Манипулация"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Медицинска генетика"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Медицинска сестра"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Микробиолог"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Невролог"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Неврохирург"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Неонатолог"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Нефролог (Бъбречни болести)"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Образна диагностика"
                        },
                        new
                        {
                            Id = 49,
                            Name = "бщопрактикуващ лекар"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Озонотерапевт"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Онколог"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Оптометрист (Очен оптик)"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Орален хирург"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Ортодонт"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Ортопед"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Отоневролог"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Офталмолог (Очен лекар)"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Паразитолог"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Пародонтолог"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Педиатър"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Пластичен хирург"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Подиатър (Болести на ходилото)"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Протетик"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Профилактични прегледи"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Психиатър"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Психолог"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Психотерапевт"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Пулмолог (Белодробни болести)"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Ревматолог"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Репродуктивна медицина"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Рехабилитатор"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Спортна медицина"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Съдов хирург"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Токсиколог"
                        },
                        new
                        {
                            Id = 75,
                            Name = "УНГ"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Уролог"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Физиотерапевт"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Хематолог (Клинична хематология)"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Хематолог (Трансфузионна хематология)"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Хирург"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Хомеопат"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Test", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Hct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hgb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaboratoryPatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MCH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MCHC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MCV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RBC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrineGravity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrinepH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WBC")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryPatientId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AdministratorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOutOfCompany")
                        .HasColumnType("bit");

                    b.Property<string>("JoinOnDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaborantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaboratoryPatientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d026cf1f-a334-41f4-a1b7-31b7a56b9f1b",
                            AccessFailedCount = 0,
                            AdministratorId = "e0b65a18-1271-4146-a730-8e80a24cea78",
                            ConcurrencyStamp = "73f213b1-52de-47fc-9e60-292a86b5e94c",
                            Email = "admin@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Ивайло",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Илиев",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MC-BG.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ9kDxn4vudf2sIcU64peYcXYFLNXoQy41e3il06bgsZUO+a3DZGyd7Fmh8Ra8/vkA==",
                            PhoneNumber = "+359888888888",
                            PhoneNumberConfirmed = false,
                            Role = "Administrator",
                            SecurityStamp = "efaf79b1-36b5-4cec-bb27-87d3c9d0fcae",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "9da9587f-e28e-4289-a559-7407d3ea34a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9633606d-b859-4ad5-af71-8e6893b24005",
                            DoctorId = "4b95c2a0-314d-414d-a80a-db46ef2f810a",
                            Email = "m_monastirska@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Маргарита",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Монастирска",
                            LockoutEnabled = false,
                            NormalizedEmail = "M_MONASTIRSKA@MC-BG.COM",
                            NormalizedUserName = "M_MONASTIRSKA",
                            PasswordHash = "AQAAAAEAACcQAAAAEHdJ1nJbtromB78jd3e47j4tBbcpYfsS21pRNytH6ynYfq0kBnN1h7RXO2oPJ2fmjw==",
                            PhoneNumber = "+359888888100",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "4965b1b1-a5c2-4b41-8866-8cf9fd05c648",
                            TwoFactorEnabled = false,
                            UserName = "m_monastirska"
                        },
                        new
                        {
                            Id = "79fb8276-3bf8-4e70-9ac3-0e53a0d3a29e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8fab32cf-328e-4928-875d-35ffe0507f61",
                            DoctorId = "22081bf0-1049-45ba-a9b3-3171271f1341",
                            Email = "s_slavchev@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Станислав",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Славчев",
                            LockoutEnabled = false,
                            NormalizedEmail = "S_SLAVCHEV@MC-BG.COM",
                            NormalizedUserName = "S_SLAVCHEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEF1KKvR4ikV8FaNqoyfMNqaqKBGAxQascX1W12j6V3SX7B07QAu04rhySRbo4W6XUw==",
                            PhoneNumber = "+359888888101",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "e9cc609c-383f-41bf-879e-db1e68549855",
                            TwoFactorEnabled = false,
                            UserName = "s_slavchev"
                        },
                        new
                        {
                            Id = "f1221132-3b9f-4f33-9e4d-1514bc0221e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8dd1496e-0f54-4906-8f2e-e0b32c76ae3a",
                            DoctorId = "4775e4ac-4930-4113-bb19-6ed94e12fa24",
                            Email = "b_petkova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Бисерка",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Петкова",
                            LockoutEnabled = false,
                            NormalizedEmail = "B_PETKOVA@MC-BG.COM",
                            NormalizedUserName = "B_PETKOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEBZ2kyst8TmVXXt0376g9Wca9QeO38beWslUa8mrLQNnY6c4T9jXR0xLKZEKe2A6pw==",
                            PhoneNumber = "+359888888102",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "42aade35-71bd-4d88-b132-cfdde210ecd3",
                            TwoFactorEnabled = false,
                            UserName = "b_petkova"
                        },
                        new
                        {
                            Id = "da3da29d-5411-4750-a5c4-e4ae4e22965c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ef228d6-1d3b-487f-9938-665dc6c0f7e5",
                            DoctorId = "499be402-5520-453d-a17d-3a52ac6ad798",
                            Email = "m_velikova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Мими",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Великова",
                            LockoutEnabled = false,
                            NormalizedEmail = "M_VELIKOVA@MC-BG.COM",
                            NormalizedUserName = "M_VELIKOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEIJBd/RB8xft7lv1naECJWd9uwKArD0ilpCVnXh2amUgij2J7Pkyh7jx498HmX7Qzw==",
                            PhoneNumber = "+359888888103",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "cdee5090-b856-449a-9fec-f5df3d88bee6",
                            TwoFactorEnabled = false,
                            UserName = "m_velikova"
                        },
                        new
                        {
                            Id = "b922fbb1-e1e8-41c6-a903-931e1cd4b845",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a18b9d4-9348-4144-a651-4a328b80f600",
                            DoctorId = "f5628f68-e883-4b6a-8c6c-2511314af5a1",
                            Email = "t_stoev@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Тодор",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Стоев",
                            LockoutEnabled = false,
                            NormalizedEmail = "T_STOEV@MC-BG.COM",
                            NormalizedUserName = "T_STOEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEGO+XpVO1HreBhrP7Z+I1qvamK0BAXSa7lrMhAk/TxHw/zMTFUt5eLP/KZ1p1ZmDyw==",
                            PhoneNumber = "+359888888104",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "3c66efd9-7869-4632-bafb-3974c05a5301",
                            TwoFactorEnabled = false,
                            UserName = "t_stoev"
                        },
                        new
                        {
                            Id = "3f9592ad-6af3-4021-808f-39d7aa9246e9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48fe697b-6840-40a4-be97-52573cdc4c30",
                            DoctorId = "c96d7a14-8865-43bc-b756-8a6ad16b3cf4",
                            Email = "m_blagoeva@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Мая",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Благоева",
                            LockoutEnabled = false,
                            NormalizedEmail = "M_BLAGOEVA@MC-BG.COM",
                            NormalizedUserName = "M_BLAGOEVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEEE6P26BwHN1o9hyU0PQ0m1mexnHzWcH1+UWk6vTDsMUVf2oeiSuCsJdkm+1YvgyLQ==",
                            PhoneNumber = "+359888888105",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "05c849ee-33be-4a7f-bb90-bff15bbde00c",
                            TwoFactorEnabled = false,
                            UserName = "m_blagoeva"
                        },
                        new
                        {
                            Id = "0bbf2307-d024-44b4-917f-a52ab9ddc013",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab480acf-da72-4249-a1ea-66a58e678a87",
                            DoctorId = "473d0775-d1d3-4439-940b-fe949652859f",
                            Email = "m_kalinkova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Мария",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Калинкова",
                            LockoutEnabled = false,
                            NormalizedEmail = "M_KALINKOVA@MC-BG.COM",
                            NormalizedUserName = "M_KALINKOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEFHIX2aY+kQM5s8jt4CvtNgvLNostE2a3lRrnzEEK9oHMPYaHX5TUURVXVrcNonG1g==",
                            PhoneNumber = "+359888888106",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "c649c5f8-48f7-4909-97ed-8064e9ce9cc2",
                            TwoFactorEnabled = false,
                            UserName = "m_kalinkova"
                        },
                        new
                        {
                            Id = "cf6e7092-584c-460d-9538-feee4a5b53d9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad22848f-1a2d-4f93-a25b-2adcf20b078e",
                            DoctorId = "97fde454-7892-40ab-acff-c641b14d1eab",
                            Email = "d_georgiev@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Димитър",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Георгиев",
                            LockoutEnabled = false,
                            NormalizedEmail = "D_GEORGIEV@MC-BG.COM",
                            NormalizedUserName = "D_GEORGIEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEAWLu9RRwjesusHDx//8uETpp118R5G3Q0aVxgEuA3JLq+tIf8HBTxSTL6tGi8DEvQ==",
                            PhoneNumber = "+359888888107",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "aade12d7-eddc-4e4e-8d73-fef3c22d0762",
                            TwoFactorEnabled = false,
                            UserName = "d_georgiev"
                        },
                        new
                        {
                            Id = "f142f846-dbe7-420e-bbce-4a9f83e36980",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1addc82a-1f65-4691-9580-a3345cd9b42d",
                            DoctorId = "221de519-48d4-41cd-befd-1b414b2fea57",
                            Email = "r_ruseva@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Ралица",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Русева",
                            LockoutEnabled = false,
                            NormalizedEmail = "R_RUSEVA@MC-BG.COM",
                            NormalizedUserName = "R_RUSEVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEGtGL4nBFAb0J8poQ7Mz5P2PuJQWr3yItEjYDLkJCVnJNfd8FDR92p6zuEBU4sQ4xg==",
                            PhoneNumber = "+359888888108",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "e097ebda-345f-4625-92a2-1309c6929a6c",
                            TwoFactorEnabled = false,
                            UserName = "r_ruseva"
                        },
                        new
                        {
                            Id = "d3ba8e2c-1f0f-4879-86b0-372d1b0bc760",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a384fc2-536e-46a7-80e4-dc7c00abbfea",
                            DoctorId = "f40725ef-50bd-4b7b-b2ab-df41d875781e",
                            Email = "s_tochev@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Сотир",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Точев",
                            LockoutEnabled = false,
                            NormalizedEmail = "S_TOCHEV@MC-BG.COM",
                            NormalizedUserName = "S_TOCHEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEP3qrge848YGkUbXckvghXBV3KsKxqgPmsnGPVpnaJynSwvEA6LsQl7sOx1/AZDhzg==",
                            PhoneNumber = "+359888888109",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "6545ed8a-3eb1-4f0f-a8e7-460c14d2f565",
                            TwoFactorEnabled = false,
                            UserName = "s_tochev"
                        },
                        new
                        {
                            Id = "8c1bcbb9-96f4-4e4e-8ec2-fc26fb79ddca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c3289e8-351b-48d8-b615-18ecbb1ebf2c",
                            DoctorId = "182466cf-4d18-4ba4-940c-71e8f445335c",
                            Email = "s_atanasova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Стела",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Атанасова",
                            LockoutEnabled = false,
                            NormalizedEmail = "S_ATANASOVA@MC-BG.COM",
                            NormalizedUserName = "S_ATANASOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEFqcXA7lctA65w/TLYS6G8E8Qq37nwr/25l7KPQF2ZBBmdSjynD8Vytrhz5PnadTdg==",
                            PhoneNumber = "+359888888110",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "e19b589c-e66a-42f1-9a51-29eb3341993a",
                            TwoFactorEnabled = false,
                            UserName = "s_atanasova"
                        },
                        new
                        {
                            Id = "095da4be-9891-4cd9-a2ad-05dbbb0e2085",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1b756a3-74a1-40ee-a540-01822020ee82",
                            DoctorId = "17dcc03b-321f-4484-a96a-61f3b8fe6dc8",
                            Email = "r_ikonomov@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Росен",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Икономов",
                            LockoutEnabled = false,
                            NormalizedEmail = "R_IKONOMOV@MC-BG.COM",
                            NormalizedUserName = "R_IKONOMOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEI/cA7Yhj1buvDCm7HenJ9gYaxCeUMHBpCO5V8Bo836Gw+YTKdYyh5H8k4VAT7ffhg==",
                            PhoneNumber = "+359888888111",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "16070f7f-c522-4b59-83ff-52a2f3015dad",
                            TwoFactorEnabled = false,
                            UserName = "r_ikonomov"
                        },
                        new
                        {
                            Id = "b67a1365-3902-4728-8c9f-05369b1556b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd503749-7a92-43eb-8bbd-dab6cd6519ce",
                            DoctorId = "d5adc893-6e93-4b1f-9ce5-7105069e7a6c",
                            Email = "m_vuldjev@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Михаил",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Вулджев",
                            LockoutEnabled = false,
                            NormalizedEmail = "M_VULDJEV@MC-BG.COM",
                            NormalizedUserName = "M_VULDJEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEFdXYa/1EKSNh7XCIeoHn6GxGg/YkTxQfgM2nPO8j9n9KsjIKrOVQsB37p4Zip8CjQ==",
                            PhoneNumber = "+359888888112",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "fb026c6b-87d6-48c8-a239-16c894178f02",
                            TwoFactorEnabled = false,
                            UserName = "m_vuldjev"
                        },
                        new
                        {
                            Id = "f092f500-00e2-4544-952a-4cb91320558d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92eab3ce-c64d-4a29-a900-024ef1e06a21",
                            DoctorId = "734a6dcd-060c-4108-a184-84997a5da2d1",
                            Email = "h_hristov@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Христо",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Христов",
                            LockoutEnabled = false,
                            NormalizedEmail = "H_HRISTOV@MC-BG.COM",
                            NormalizedUserName = "H_HRISTOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEAlOUk3RzVByUwnyLZSQyq91yV8b9uS2ndMEh0i6T06jUWtU/f+GvJ5g74kE/lNCVQ==",
                            PhoneNumber = "+359888888113",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "7a065c74-d5bf-4d62-a471-4e9d7bad6037",
                            TwoFactorEnabled = false,
                            UserName = "h_hristov"
                        },
                        new
                        {
                            Id = "c8517d67-c0f3-4cb8-ac8c-96602aaad8bb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d34b537-8fa8-4183-8e56-de2189114157",
                            DoctorId = "61f0536e-26ec-46cc-9386-1c7cb348f1e7",
                            Email = "a_tomova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Антония",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Томова",
                            LockoutEnabled = false,
                            NormalizedEmail = "A_TOMOVA@MC-BG.COM",
                            NormalizedUserName = "A_TOMOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEAEZ8q6Q7bXKvVmDcGg2xK58wAZulo/vdhHYJGcWWukMkT+IN6qZUWjojHcrD9/Brw==",
                            PhoneNumber = "+359888888114",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "2fcf059a-5685-434e-976a-a918c5d628a1",
                            TwoFactorEnabled = false,
                            UserName = "a_tomova"
                        },
                        new
                        {
                            Id = "041639c2-fcd2-4899-a5c6-2025cbb3c1c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0deeb384-50ad-4bc8-90b4-4b4a9a9ad2f3",
                            DoctorId = "9c85bdfe-768b-43bc-bc3d-91d3565edd7a",
                            Email = "k_moskova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Катерина",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Москова",
                            LockoutEnabled = false,
                            NormalizedEmail = "K_MOSKOVA@MC-BG.COM",
                            NormalizedUserName = "K_MOSKOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAELpDW871DTUWggvQspz2kdUGJ19RJhW1r2w7DnAkgnUrzg7BL1Viwz8PErsGseGz4w==",
                            PhoneNumber = "+359888888115",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "7d8ef4e3-4557-47e5-9222-fe636362d879",
                            TwoFactorEnabled = false,
                            UserName = "k_moskova"
                        },
                        new
                        {
                            Id = "c83d8295-ff6a-4644-a44a-c2bc294b220e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6eb39580-46fd-44cc-8499-0ec708869890",
                            DoctorId = "5b0923f7-da08-4af1-a391-d0561a534a42",
                            Email = "k_atanasova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Кристина",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Атанасова",
                            LockoutEnabled = false,
                            NormalizedEmail = "K_ATANASOVA@MC-BG.COM",
                            NormalizedUserName = "K_ATANASOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEFFKpC4rbgA07smhDcbbcXRXEsHhvLaab1Cfdqt+5/xJO9foC7woWGZTYj9EvRZGPA==",
                            PhoneNumber = "+359888888116",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "fb27012b-60e9-4efc-bae4-434ba22853e4",
                            TwoFactorEnabled = false,
                            UserName = "k_atanasova"
                        },
                        new
                        {
                            Id = "8f052e1c-d7f5-40d4-9ee4-9c9f29a85ffe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a10881b3-c2d3-420d-8332-e93bc08f8574",
                            DoctorId = "9e38d1b5-6ba5-4e49-bbf0-7d893dd5b040",
                            Email = "g_kuchukov@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Георги",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Кичуков",
                            LockoutEnabled = false,
                            NormalizedEmail = "G_KUCHUKOV@MC-BG.COM",
                            NormalizedUserName = "G_KUCHUKOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEKXxBvjTJCJLo1YZWocL5pKIftE40VmHUHb3aX14Af69+ny/iIYT+WElyijDX/CcIQ==",
                            PhoneNumber = "+359888888117",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "048eed50-8775-4d08-95e9-f55195dc6b94",
                            TwoFactorEnabled = false,
                            UserName = "g_kuchukov"
                        },
                        new
                        {
                            Id = "a8d60b9c-6bef-4eff-af47-bcce7daf311b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d541f25-21ce-4372-8977-f39b6ad16be7",
                            DoctorId = "992d83f0-1439-40dc-95f4-5a708fd3c086",
                            Email = "k_stoicheva@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Катина",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Стойчева",
                            LockoutEnabled = false,
                            NormalizedEmail = "K_STOICHEVA@MC-BG.COM",
                            NormalizedUserName = "K_STOICHEVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEMoWWNE+WJHzT1sLrzCNfLe1BXjVA+on9TWYg8QmW37Ymgck8X47O2j18m6Mg8jF5A==",
                            PhoneNumber = "+359888888118",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "4531e1a5-40be-4b69-8f3b-b2f5f802016e",
                            TwoFactorEnabled = false,
                            UserName = "k_stoicheva"
                        },
                        new
                        {
                            Id = "7c513995-bed0-4be3-b768-304cd697c3f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ee873b3-9689-4830-8060-f2bc1b496e8f",
                            DoctorId = "cb55ad4a-e7c3-4cd6-8efb-6ccd3c369f4e",
                            Email = "n_paskov@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Николай",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Пасков",
                            LockoutEnabled = false,
                            NormalizedEmail = "N_PASKOV@MC-BG.COM",
                            NormalizedUserName = "N_PASKOV",
                            PasswordHash = "AQAAAAEAACcQAAAAELFB/GAxwq/gcpyjINBzAlnOF2aa921JhETXySkMNE4ijzNNIW44kHuyFvOv8HpI1Q==",
                            PhoneNumber = "+359888888119",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "d5aa6cb2-7b46-42c2-a1de-e99709b0c3b5",
                            TwoFactorEnabled = false,
                            UserName = "n_paskov"
                        },
                        new
                        {
                            Id = "cd25b1ea-70c5-47d2-9617-3b7d0e6bc788",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be66536c-bdd5-433d-8384-367eccb39ece",
                            DoctorId = "be158f8c-bc22-4469-b01c-b9e928499a05",
                            Email = "r_uzunova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Росица",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Узунова",
                            LockoutEnabled = false,
                            NormalizedEmail = "R_UZUNOVA@MC-BG.COM",
                            NormalizedUserName = "R_UZUNOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ36lLPZkjrsH6gdKUvdhSoY9WVxOMOYmML+S1jKES4fhFLM94w0dn9b2bgVy+uHDQ==",
                            PhoneNumber = "+359888888120",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "fd581595-bb8f-431e-96bc-536455ad2f2c",
                            TwoFactorEnabled = false,
                            UserName = "r_uzunova"
                        },
                        new
                        {
                            Id = "734267e9-a59b-44c3-baee-7e52a2bd1c29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ebef979c-77f2-4b63-ad51-7b6e753a52fe",
                            DoctorId = "4be5615e-0d14-4756-a090-bd157133f463",
                            Email = "i_belcheva@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Ирина",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LastName = "Белчева",
                            LockoutEnabled = false,
                            NormalizedEmail = "I_BELCHEVA@MC-BG.COM",
                            NormalizedUserName = "I_BELCHEVA",
                            PasswordHash = "AQAAAAEAACcQAAAAECahy+zAcMUaHrOdFhZmoTgUX0NEth41I/BHa+Iy8IMId70n88/ssPIRU+PLcWjjuQ==",
                            PhoneNumber = "+359888888121",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "f55a855b-a62c-4490-bb70-35a3bed75b0e",
                            TwoFactorEnabled = false,
                            UserName = "i_belcheva"
                        },
                        new
                        {
                            Id = "fb454478-8b7c-48bd-86b4-a0b36bf261a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96ad09dc-e5d7-47aa-82f4-43c7b1f58d63",
                            Email = "lab_vivanova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Ваня",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "08.12.2022",
                            LaborantId = "fb454478-8b7c-48bd-86b4-a0b36bf261a2",
                            LastName = "Иванова",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAB_VIVANOVA@MC-BG.COM",
                            NormalizedUserName = "LAB_VIVANOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEG7eex9zYWbWchWcTpTi4rUSYM0Ji/D6jMoPgPWYeCn9Myg7Eng9tC4Cpkwa8RGnKw==",
                            PhoneNumber = "+359888888881",
                            PhoneNumberConfirmed = false,
                            Role = "Laborant",
                            SecurityStamp = "f413496b-e7da-4db6-8554-b53cb3ecfb95",
                            TwoFactorEnabled = false,
                            UserName = "lab_vivanova"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.WorkHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SheduleId");

                    b.ToTable("WorkHours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Hour = "08:00",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Hour = "08:30",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 3,
                            Hour = "09:00",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 4,
                            Hour = "09:30",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 5,
                            Hour = "10:00",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 6,
                            Hour = "10:30",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 7,
                            Hour = "11:00",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 8,
                            Hour = "11:30",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 9,
                            Hour = "13:00",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 10,
                            Hour = "13:30",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 11,
                            Hour = "14:00",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 12,
                            Hour = "14:30",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 13,
                            Hour = "15:00",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 14,
                            Hour = "15:30",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 15,
                            Hour = "16:00",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 16,
                            Hour = "16:30",
                            SheduleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "21054893-923f-4121-980e-d45fd8cb2d2c",
                            ConcurrencyStamp = "114c17fb-ec41-4dc5-bc70-d979e49ac6b8",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "7f35ce32-b6d5-4263-a6f1-a4866727d065",
                            ConcurrencyStamp = "9fb8904b-7a38-46c8-96ea-1e4699a87518",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "1382ab01-813e-4993-ba82-9b55dafd62a6",
                            ConcurrencyStamp = "b05f18e7-a048-4d0b-987a-7d4080822eb1",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "44078427-01ab-4211-b865-b97d481bd493",
                            ConcurrencyStamp = "8b425ef2-1970-4e1c-ab0d-f5879bb05fcc",
                            Name = "Laborant",
                            NormalizedName = "LABORANT"
                        },
                        new
                        {
                            Id = "c37e5c42-68fc-40b6-82b6-3bcb6b06c8b7",
                            ConcurrencyStamp = "b3524dcf-44c8-4802-acaa-c37b1288fcb3",
                            Name = "LaboratoryUser",
                            NormalizedName = "LABORATORYUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d026cf1f-a334-41f4-a1b7-31b7a56b9f1b",
                            RoleId = "21054893-923f-4121-980e-d45fd8cb2d2c"
                        },
                        new
                        {
                            UserId = "9da9587f-e28e-4289-a559-7407d3ea34a5",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "79fb8276-3bf8-4e70-9ac3-0e53a0d3a29e",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "f1221132-3b9f-4f33-9e4d-1514bc0221e8",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "da3da29d-5411-4750-a5c4-e4ae4e22965c",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "b922fbb1-e1e8-41c6-a903-931e1cd4b845",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "3f9592ad-6af3-4021-808f-39d7aa9246e9",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "0bbf2307-d024-44b4-917f-a52ab9ddc013",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "cf6e7092-584c-460d-9538-feee4a5b53d9",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "f142f846-dbe7-420e-bbce-4a9f83e36980",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "d3ba8e2c-1f0f-4879-86b0-372d1b0bc760",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "8c1bcbb9-96f4-4e4e-8ec2-fc26fb79ddca",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "095da4be-9891-4cd9-a2ad-05dbbb0e2085",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "b67a1365-3902-4728-8c9f-05369b1556b7",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "f092f500-00e2-4544-952a-4cb91320558d",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "c8517d67-c0f3-4cb8-ac8c-96602aaad8bb",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "041639c2-fcd2-4899-a5c6-2025cbb3c1c7",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "c83d8295-ff6a-4644-a44a-c2bc294b220e",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "8f052e1c-d7f5-40d4-9ee4-9c9f29a85ffe",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "a8d60b9c-6bef-4eff-af47-bcce7daf311b",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "7c513995-bed0-4be3-b768-304cd697c3f9",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "cd25b1ea-70c5-47d2-9617-3b7d0e6bc788",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "734267e9-a59b-44c3-baee-7e52a2bd1c29",
                            RoleId = "7f35ce32-b6d5-4263-a6f1-a4866727d065"
                        },
                        new
                        {
                            UserId = "fb454478-8b7c-48bd-86b4-a0b36bf261a2",
                            RoleId = "44078427-01ab-4211-b865-b97d481bd493"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Administrator", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithOne("Administrator")
                        .HasForeignKey("MedicalCenter.Infrastructure.Data.Models.Administrator", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Doctor", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Shedule", "Shedule")
                        .WithMany("Doctors")
                        .HasForeignKey("SheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Specialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("MedicalCenter.Infrastructure.Data.Models.Doctor", "UserId");

                    b.Navigation("Shedule");

                    b.Navigation("Specialty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Examination", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorExaminations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId");

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Shedule", "Shedule")
                        .WithMany()
                        .HasForeignKey("SheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithMany("UserExaminations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Review");

                    b.Navigation("Shedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Laborant", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithOne("Laborant")
                        .HasForeignKey("MedicalCenter.Infrastructure.Data.Models.Laborant", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.LaboratoryPatient", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithOne("LaboratoryPatient")
                        .HasForeignKey("MedicalCenter.Infrastructure.Data.Models.LaboratoryPatient", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Review", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorReviews")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithMany("UserReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Test", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.LaboratoryPatient", "LaboratoryPatient")
                        .WithMany("Tests")
                        .HasForeignKey("LaboratoryPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaboratoryPatient");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.WorkHour", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Shedule", "Shedule")
                        .WithMany("WorkHours")
                        .HasForeignKey("SheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Shedule");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Doctor", b =>
                {
                    b.Navigation("DoctorExaminations");

                    b.Navigation("DoctorReviews");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.LaboratoryPatient", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Shedule", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("WorkHours");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Specialty", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.User", b =>
                {
                    b.Navigation("Administrator");

                    b.Navigation("Doctor");

                    b.Navigation("Laborant");

                    b.Navigation("LaboratoryPatient");

                    b.Navigation("UserExaminations");

                    b.Navigation("UserReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
