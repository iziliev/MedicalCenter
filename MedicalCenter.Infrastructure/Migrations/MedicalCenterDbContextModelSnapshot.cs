// <auto-generated />
using System;
using MedicalCenter.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalCenter.Infrastructure.Migrations
{
    [DbContext(typeof(MedicalCenterDbContext))]
    partial class MedicalCenterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Administrator", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Egn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OutOnDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Administrators");

                    b.HasData(
                        new
                        {
                            Id = "e0b65a18-1271-4146-a730-8e80a24cea78",
                            Egn = "9305264209",
                            UserId = "d026cf1f-a334-41f4-a1b7-31b7a56b9f1b"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Egn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OutOnDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Representation")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SheduleId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SheduleId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = "4b95c2a0-314d-414d-a80a-db46ef2f810a",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7903129851",
                            ProfileImageUrl = "https://i.imgur.com/9gZeKsk.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 1,
                            UserId = "9da9587f-e28e-4289-a559-7407d3ea34a5"
                        },
                        new
                        {
                            Id = "22081bf0-1049-45ba-a9b3-3171271f1341",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7512150522",
                            ProfileImageUrl = "https://i.imgur.com/73peyhD.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 1,
                            UserId = "79fb8276-3bf8-4e70-9ac3-0e53a0d3a29e"
                        },
                        new
                        {
                            Id = "4775e4ac-4930-4113-bb19-6ed94e12fa24",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7412135099",
                            ProfileImageUrl = "https://i.imgur.com/66UFmBy.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 8,
                            UserId = "f1221132-3b9f-4f33-9e4d-1514bc0221e8"
                        },
                        new
                        {
                            Id = "499be402-5520-453d-a17d-3a52ac6ad798",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "8707015574",
                            ProfileImageUrl = "https://i.imgur.com/7VzO2Pm.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 8,
                            UserId = "da3da29d-5411-4750-a5c4-e4ae4e22965c"
                        },
                        new
                        {
                            Id = "f5628f68-e883-4b6a-8c6c-2511314af5a1",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "6902251307",
                            ProfileImageUrl = "https://i.imgur.com/oSv4hEn.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 11,
                            UserId = "b922fbb1-e1e8-41c6-a903-931e1cd4b845"
                        },
                        new
                        {
                            Id = "c96d7a14-8865-43bc-b756-8a6ad16b3cf4",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7904245096",
                            ProfileImageUrl = "https://i.imgur.com/2xoQC2H.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 11,
                            UserId = "3f9592ad-6af3-4021-808f-39d7aa9246e9"
                        },
                        new
                        {
                            Id = "473d0775-d1d3-4439-940b-fe949652859f",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "9107227892",
                            ProfileImageUrl = "https://i.imgur.com/yQmifbA.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 24,
                            UserId = "0bbf2307-d024-44b4-917f-a52ab9ddc013"
                        },
                        new
                        {
                            Id = "97fde454-7892-40ab-acff-c641b14d1eab",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7504196361",
                            ProfileImageUrl = "https://i.imgur.com/62LMUUe.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 24,
                            UserId = "cf6e7092-584c-460d-9538-feee4a5b53d9"
                        },
                        new
                        {
                            Id = "221de519-48d4-41cd-befd-1b414b2fea57",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "9401161818",
                            ProfileImageUrl = "https://i.imgur.com/LKNbRcV.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 31,
                            UserId = "f142f846-dbe7-420e-bbce-4a9f83e36980"
                        },
                        new
                        {
                            Id = "f40725ef-50bd-4b7b-b2ab-df41d875781e",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "8112144846",
                            ProfileImageUrl = "https://i.imgur.com/YK3Y8Ya.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 31,
                            UserId = "d3ba8e2c-1f0f-4879-86b0-372d1b0bc760"
                        },
                        new
                        {
                            Id = "182466cf-4d18-4ba4-940c-71e8f445335c",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7702262899",
                            ProfileImageUrl = "https://i.imgur.com/oFAixEu.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 44,
                            UserId = "8c1bcbb9-96f4-4e4e-8ec2-fc26fb79ddca"
                        },
                        new
                        {
                            Id = "17dcc03b-321f-4484-a96a-61f3b8fe6dc8",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "8707192482",
                            ProfileImageUrl = "https://i.imgur.com/E5Yga61.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 44,
                            UserId = "095da4be-9891-4cd9-a2ad-05dbbb0e2085"
                        },
                        new
                        {
                            Id = "d5adc893-6e93-4b1f-9ce5-7105069e7a6c",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7512152504",
                            ProfileImageUrl = "https://i.imgur.com/YO1cWgu.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 55,
                            UserId = "b67a1365-3902-4728-8c9f-05369b1556b7"
                        },
                        new
                        {
                            Id = "734a6dcd-060c-4108-a184-84997a5da2d1",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7512155144",
                            ProfileImageUrl = "https://i.imgur.com/42rKRT2.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 55,
                            UserId = "f092f500-00e2-4544-952a-4cb91320558d"
                        },
                        new
                        {
                            Id = "61f0536e-26ec-46cc-9386-1c7cb348f1e7",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7411033533",
                            ProfileImageUrl = "https://i.imgur.com/WkPS5Ds.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 60,
                            UserId = "c8517d67-c0f3-4cb8-ac8c-96602aaad8bb"
                        },
                        new
                        {
                            Id = "9c85bdfe-768b-43bc-bc3d-91d3565edd7a",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7609186138",
                            ProfileImageUrl = "https://i.imgur.com/2HO3b8v.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 60,
                            UserId = "041639c2-fcd2-4899-a5c6-2025cbb3c1c7"
                        },
                        new
                        {
                            Id = "5b0923f7-da08-4af1-a391-d0561a534a42",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "8606163716",
                            ProfileImageUrl = "https://i.imgur.com/GhnW3gD.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 75,
                            UserId = "c83d8295-ff6a-4644-a44a-c2bc294b220e"
                        },
                        new
                        {
                            Id = "9e38d1b5-6ba5-4e49-bbf0-7d893dd5b040",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "9002041303",
                            ProfileImageUrl = "https://i.imgur.com/fkXWOZT.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 75,
                            UserId = "8f052e1c-d7f5-40d4-9ee4-9c9f29a85ffe"
                        },
                        new
                        {
                            Id = "992d83f0-1439-40dc-95f4-5a708fd3c086",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7801138974",
                            ProfileImageUrl = "https://i.imgur.com/6NU5RvT.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 76,
                            UserId = "a8d60b9c-6bef-4eff-af47-bcce7daf311b"
                        },
                        new
                        {
                            Id = "cb55ad4a-e7c3-4cd6-8efb-6ccd3c369f4e",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "9103145306",
                            ProfileImageUrl = "https://i.imgur.com/f5yYnPN.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 76,
                            UserId = "7c513995-bed0-4be3-b768-304cd697c3f9"
                        },
                        new
                        {
                            Id = "be158f8c-bc22-4469-b01c-b9e928499a05",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7512158631",
                            ProfileImageUrl = "https://i.imgur.com/hx5EEMp.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 77,
                            UserId = "cd25b1ea-70c5-47d2-9617-3b7d0e6bc788"
                        },
                        new
                        {
                            Id = "4be5615e-0d14-4756-a090-bd157133f463",
                            Biography = "Това е поредица от латински думи които, както са позиционирани, не образувайте изречения с пълен смисъл, а дайте живот на тестов текст, полезен за запълване на пространства, които впоследствие ще бъдат заети от ad hoc текстове, съставени от комуникационни специалисти. Със сигурност е най -известният заместващ текст дори ако има различни версии, които се различават от реда, в който се повтарят латинските думи. Lorem ipsum съдържа шрифтове , които се използват повече, аспект което ви позволява да имате преглед на изобразяването на текста по отношение на избор на шрифт an d размер на шрифта.",
                            Education = "Когато се отнася до Lorem ipsum, се използват различни изрази, а именно текст за попълване, измислен текст, сляп текст или заместващ текст: накратко, значението му също може да бъде нула, но полезността му е толкова ясна, че да мине през вековете и да устои на ироничните и модерни версии, дошли с появата на мрежата.",
                            Egn = "7512158992",
                            ProfileImageUrl = "https://i.imgur.com/dj7NvUl.jpg",
                            Representation = "Lorem ipsum dolor sit amet. Графичните и типографските оператори знаят това добре, в действителност всички професии, занимаващи се с комуникационната вселена, имат стабилна връзка с тези думи, но какво е това? Lorem ipsum е фиктивен текст без никакъв смисъл.",
                            SheduleId = 1,
                            SpecialtyId = 77,
                            UserId = "734267e9-a59b-44c3-baee-7e52a2bd1c29"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Examination", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DoctorPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserReviewedExamination")
                        .HasColumnType("bit");

                    b.Property<string>("ReviewId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SheduleId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("SheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Мъж"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Жена"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Не посочвам"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Laborant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Egn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OutOnDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Laborants");

                    b.HasData(
                        new
                        {
                            Id = "fb454478-8b7c-48bd-86b4-a0b36bf261a2",
                            Egn = "8412194792",
                            UserId = "fb454478-8b7c-48bd-86b4-a0b36bf261a2"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.LaboratoryPatient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Egn")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("LaboratoryPatients");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Shedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Shedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Първа смяна"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Втора смяна"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Акушер-гинеколог"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Алерголог"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Алтернативна медицина"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ангиолог"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Анестезиолог"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Боуен терапевт"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Вирусолог"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Вътрешни болести"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Гастроентеролог"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Гръден хирург"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Дерматолог"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Детски гастроентеролог"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Детски ендокринолог"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Детски кардиолог"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Детски невролог"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Детски нефролог"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Детски психиатър"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Детски пулмолог"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Детски ревматолог"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Детски хематолог"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Детски хирург"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Диетолог"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Ендодонт"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Ендокринолог"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Естетичен дерматолог"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Зъболекар (Стоматолог)"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Изследване"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Имплантолог"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Имунолог"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Инфекциозни болести"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Кардиолог"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Кардиохирург"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Кинезитерапевт"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Клинична лаборатория"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Коуч"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Лицево-челюстен хирург"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Логопед"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Лъчетерапевт"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Мамолог"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Манипулация"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Медицинска генетика"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Медицинска сестра"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Микробиолог"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Невролог"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Неврохирург"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Неонатолог"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Нефролог (Бъбречни болести)"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Образна диагностика"
                        },
                        new
                        {
                            Id = 49,
                            Name = "бщопрактикуващ лекар"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Озонотерапевт"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Онколог"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Оптометрист (Очен оптик)"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Орален хирург"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Ортодонт"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Ортопед"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Отоневролог"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Офталмолог (Очен лекар)"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Паразитолог"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Пародонтолог"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Педиатър"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Пластичен хирург"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Подиатър (Болести на ходилото)"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Протетик"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Профилактични прегледи"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Психиатър"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Психолог"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Психотерапевт"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Пулмолог (Белодробни болести)"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Ревматолог"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Репродуктивна медицина"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Рехабилитатор"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Спортна медицина"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Съдов хирург"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Токсиколог"
                        },
                        new
                        {
                            Id = 75,
                            Name = "УНГ"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Уролог"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Физиотерапевт"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Хематолог (Клинична хематология)"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Хематолог (Трансфузионна хематология)"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Хирург"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Хомеопат"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Test", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Hct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hgb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaboratoryPatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MCH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MCHC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MCV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RBC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrineGravity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrinepH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WBC")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryPatientId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AdministratorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOutOfCompany")
                        .HasColumnType("bit");

                    b.Property<string>("JoinOnDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaborantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaboratoryPatientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d026cf1f-a334-41f4-a1b7-31b7a56b9f1b",
                            AccessFailedCount = 0,
                            AdministratorId = "e0b65a18-1271-4146-a730-8e80a24cea78",
                            ConcurrencyStamp = "5e719529-6b00-4c60-9653-8c9c085a234b",
                            Email = "admin@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Ивайло",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            LastName = "Илиев",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MC-BG.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFKeB8bWio7xHbcvRKj7VpDwqj2KC3dkw4q3l0/G+hSdaTF4OZGpExrSZI8dpNYBEg==",
                            PhoneNumber = "+359888888888",
                            PhoneNumberConfirmed = false,
                            Role = "Administrator",
                            SecurityStamp = "dd556a14-a4da-4f40-826e-7b4b35f32e85",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "9da9587f-e28e-4289-a559-7407d3ea34a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3070bc4-c138-4b9f-9e27-4a58e5d07e44",
                            DoctorId = "4b95c2a0-314d-414d-a80a-db46ef2f810a",
                            Email = "m_monastirska@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Маргарита",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Монастирска",
                            LockoutEnabled = false,
                            NormalizedEmail = "M_MONASTIRSKA@MC-BG.COM",
                            NormalizedUserName = "M_MONASTIRSKA",
                            PasswordHash = "AQAAAAEAACcQAAAAEKEbKWah0Git5QXEK9f0KEiEQRQl9173d3PrrEVQ2wUD5P4s2qhNLFZ0f4SarUbz0g==",
                            PhoneNumber = "+359888888100",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "3736f457-82f7-4dd8-9ae0-649302a22438",
                            TwoFactorEnabled = false,
                            UserName = "m_monastirska"
                        },
                        new
                        {
                            Id = "79fb8276-3bf8-4e70-9ac3-0e53a0d3a29e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2359af68-2cfd-43e2-9e53-8c2084a99caa",
                            DoctorId = "22081bf0-1049-45ba-a9b3-3171271f1341",
                            Email = "s_slavchev@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Станислав",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Славчев",
                            LockoutEnabled = false,
                            NormalizedEmail = "S_SLAVCHEV@MC-BG.COM",
                            NormalizedUserName = "S_SLAVCHEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEOMpDJkOJlYd+ysoNM3LHXsBqFoncabNEMRfEHLY79e2h5XoSe++dnxStfasGaC4+g==",
                            PhoneNumber = "+359888888101",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "823e322a-2a1b-4907-9d3d-073229ebba7f",
                            TwoFactorEnabled = false,
                            UserName = "s_slavchev"
                        },
                        new
                        {
                            Id = "f1221132-3b9f-4f33-9e4d-1514bc0221e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d46d4b1-b57c-4d00-a868-4ee5f6054e2e",
                            DoctorId = "4775e4ac-4930-4113-bb19-6ed94e12fa24",
                            Email = "b_petkova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Бисерка",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Петкова",
                            LockoutEnabled = false,
                            NormalizedEmail = "B_PETKOVA@MC-BG.COM",
                            NormalizedUserName = "B_PETKOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEAr+jbkU4mGt+wvnRF76oltOmN9iI50uM968DpNyM7n0Tvz9AeeiPdSfAQdueyS1Fg==",
                            PhoneNumber = "+359888888102",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "c16b133b-5b4f-4034-b6cb-814134831629",
                            TwoFactorEnabled = false,
                            UserName = "b_petkova"
                        },
                        new
                        {
                            Id = "da3da29d-5411-4750-a5c4-e4ae4e22965c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "261312c0-6ef6-4c4a-a83e-aa4ed3168ff2",
                            DoctorId = "499be402-5520-453d-a17d-3a52ac6ad798",
                            Email = "m_velikova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Мими",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Великова",
                            LockoutEnabled = false,
                            NormalizedEmail = "M_VELIKOVA@MC-BG.COM",
                            NormalizedUserName = "M_VELIKOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEIjXX7KNqbFjpGXKCpFaHvTdbIMYlUwYReK3gBvlOHJDyC4kiZpn5eKdmsoIfyzcFg==",
                            PhoneNumber = "+359888888103",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "bd2d7c4a-8f64-4be4-a3a0-c3f65c1c5cf8",
                            TwoFactorEnabled = false,
                            UserName = "m_velikova"
                        },
                        new
                        {
                            Id = "b922fbb1-e1e8-41c6-a903-931e1cd4b845",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2adcc5b-0411-4739-89e1-1d5f93f8929f",
                            DoctorId = "f5628f68-e883-4b6a-8c6c-2511314af5a1",
                            Email = "t_stoev@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Тодор",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Стоев",
                            LockoutEnabled = false,
                            NormalizedEmail = "T_STOEV@MC-BG.COM",
                            NormalizedUserName = "T_STOEV",
                            PasswordHash = "AQAAAAEAACcQAAAAECreZCOLID/f4Eqxlg/VHz3qvgVO0IdJ8uBb6X4lqxRZhX3C3r1L6MR2xoNewzSQIw==",
                            PhoneNumber = "+359888888104",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "c4035d1d-fa2f-49fd-a87f-ad65918e1457",
                            TwoFactorEnabled = false,
                            UserName = "t_stoev"
                        },
                        new
                        {
                            Id = "3f9592ad-6af3-4021-808f-39d7aa9246e9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf146713-f4f2-4e2f-b4d3-32c915e3c7cb",
                            DoctorId = "c96d7a14-8865-43bc-b756-8a6ad16b3cf4",
                            Email = "m_blagoeva@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Мая",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Благоева",
                            LockoutEnabled = false,
                            NormalizedEmail = "M_BLAGOEVA@MC-BG.COM",
                            NormalizedUserName = "M_BLAGOEVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEIaFP2NkY5xXg5hvtzILq4b4f3sdemYcdfbupNfUbEgNj07WJqahinFCNA+Y9nKGxg==",
                            PhoneNumber = "+359888888105",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "75fe8af8-b499-4ca9-95a5-cec16c84b248",
                            TwoFactorEnabled = false,
                            UserName = "m_blagoeva"
                        },
                        new
                        {
                            Id = "0bbf2307-d024-44b4-917f-a52ab9ddc013",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a5443ec-10c8-4e3d-8275-d558d07aedea",
                            DoctorId = "473d0775-d1d3-4439-940b-fe949652859f",
                            Email = "m_kalinkova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Мария",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Калинкова",
                            LockoutEnabled = false,
                            NormalizedEmail = "M_KALINKOVA@MC-BG.COM",
                            NormalizedUserName = "M_KALINKOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEOIrVe9yY+a0mLQ5sOn3kRrZEHnSVpHsuwA1mpaU7MYXOBKl0PtMZdWOqhj6vM0UFQ==",
                            PhoneNumber = "+359888888106",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "4b58aecf-6cf1-417e-b73b-81daac2e2207",
                            TwoFactorEnabled = false,
                            UserName = "m_kalinkova"
                        },
                        new
                        {
                            Id = "cf6e7092-584c-460d-9538-feee4a5b53d9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e467f5a-736a-4e30-bc80-c0599e2933c5",
                            DoctorId = "97fde454-7892-40ab-acff-c641b14d1eab",
                            Email = "d_georgiev@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Димитър",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Георгиев",
                            LockoutEnabled = false,
                            NormalizedEmail = "D_GEORGIEV@MC-BG.COM",
                            NormalizedUserName = "D_GEORGIEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEMb9OSGajduZpX5pSQzts1rhUEgLZL8RqeRhIxyqyzaQRBkR3HDkbUf8yCbz8t4wyA==",
                            PhoneNumber = "+359888888107",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "1ab9dfd1-c7c9-49bb-ab9e-7a2963d9d0cf",
                            TwoFactorEnabled = false,
                            UserName = "d_georgiev"
                        },
                        new
                        {
                            Id = "f142f846-dbe7-420e-bbce-4a9f83e36980",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ea21f78-9370-4647-b5cf-6f9fb188b825",
                            DoctorId = "221de519-48d4-41cd-befd-1b414b2fea57",
                            Email = "r_ruseva@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Ралица",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Русева",
                            LockoutEnabled = false,
                            NormalizedEmail = "R_RUSEVA@MC-BG.COM",
                            NormalizedUserName = "R_RUSEVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEOXuxzP5dTWf18FiTpxXRBNxz4TyxmEOvC07RWqUyhcsZ1j0fJnLtDlo7fJJuVWKpg==",
                            PhoneNumber = "+359888888108",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "7acf7616-5383-4e58-a29e-8813f72ad6dc",
                            TwoFactorEnabled = false,
                            UserName = "r_ruseva"
                        },
                        new
                        {
                            Id = "d3ba8e2c-1f0f-4879-86b0-372d1b0bc760",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28a3fcc1-7631-4817-86e2-1b424fac63eb",
                            DoctorId = "f40725ef-50bd-4b7b-b2ab-df41d875781e",
                            Email = "s_tochev@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Сотир",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Точев",
                            LockoutEnabled = false,
                            NormalizedEmail = "S_TOCHEV@MC-BG.COM",
                            NormalizedUserName = "S_TOCHEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEI4CGHtO8n6BpBThl/d/PGr4vhJCV6Wifn8B9E/uM5WFVKs2O06K7T2LH+4sYUZlhQ==",
                            PhoneNumber = "+359888888109",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "423a368e-ecb5-4f08-ae3c-016677d7c890",
                            TwoFactorEnabled = false,
                            UserName = "s_tochev"
                        },
                        new
                        {
                            Id = "8c1bcbb9-96f4-4e4e-8ec2-fc26fb79ddca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87d6f9f1-8073-47af-b9f0-0f5d232dccee",
                            DoctorId = "182466cf-4d18-4ba4-940c-71e8f445335c",
                            Email = "s_atanasova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Стела",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Атанасова",
                            LockoutEnabled = false,
                            NormalizedEmail = "S_ATANASOVA@MC-BG.COM",
                            NormalizedUserName = "S_ATANASOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEEA0ZqU9cmjGwK3qthfPuruMJ6l8o/ghB9qmT4sam/ZIIpyyHHrIssnzdJhYDz+k2A==",
                            PhoneNumber = "+359888888110",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "f0fe8690-ba22-48f5-8996-2c5d76b1515a",
                            TwoFactorEnabled = false,
                            UserName = "s_atanasova"
                        },
                        new
                        {
                            Id = "095da4be-9891-4cd9-a2ad-05dbbb0e2085",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6fc0e3d3-3b8c-426d-ace5-6b39a191d3a3",
                            DoctorId = "17dcc03b-321f-4484-a96a-61f3b8fe6dc8",
                            Email = "r_ikonomov@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Росен",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Икономов",
                            LockoutEnabled = false,
                            NormalizedEmail = "R_IKONOMOV@MC-BG.COM",
                            NormalizedUserName = "R_IKONOMOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEEHHcNHgJgSrVwQ4nu4FqnL3xBhRX0HneYpqdkgnnhSmPxzgpZZQlhtrl8NwlkIjmw==",
                            PhoneNumber = "+359888888111",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "df4920d8-ca30-4d93-913a-6deab88d7de3",
                            TwoFactorEnabled = false,
                            UserName = "r_ikonomov"
                        },
                        new
                        {
                            Id = "b67a1365-3902-4728-8c9f-05369b1556b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "715ec61c-0d8b-4444-b65b-cbb3f1f418cb",
                            DoctorId = "d5adc893-6e93-4b1f-9ce5-7105069e7a6c",
                            Email = "m_vuldjev@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Михаил",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Вулджев",
                            LockoutEnabled = false,
                            NormalizedEmail = "M_VULDJEV@MC-BG.COM",
                            NormalizedUserName = "M_VULDJEV",
                            PasswordHash = "AQAAAAEAACcQAAAAEEmOLS7R1wkgsrwo1Tl3dYUQ87b+QqKZy4WQoGW01lqllY9ey/JGhsAxBheyti+msg==",
                            PhoneNumber = "+359888888112",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "51130571-2b56-481a-871b-7acd8f44c140",
                            TwoFactorEnabled = false,
                            UserName = "m_vuldjev"
                        },
                        new
                        {
                            Id = "f092f500-00e2-4544-952a-4cb91320558d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03d237b8-2d71-4a88-9b67-d3445543f92a",
                            DoctorId = "734a6dcd-060c-4108-a184-84997a5da2d1",
                            Email = "h_hristov@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Христо",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Христов",
                            LockoutEnabled = false,
                            NormalizedEmail = "H_HRISTOV@MC-BG.COM",
                            NormalizedUserName = "H_HRISTOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEHvh10zM+5ms11KlukphcYaCz2c32fMLI4j9Z5AEQ0zO3rfVAx+zoC5n0g0kzZ4HlA==",
                            PhoneNumber = "+359888888113",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "3175560f-a1da-449d-8cfc-d1bc353e2258",
                            TwoFactorEnabled = false,
                            UserName = "h_hristov"
                        },
                        new
                        {
                            Id = "c8517d67-c0f3-4cb8-ac8c-96602aaad8bb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70c88a64-273d-4717-b866-b86ec0bec9f5",
                            DoctorId = "61f0536e-26ec-46cc-9386-1c7cb348f1e7",
                            Email = "a_tomova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Антония",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Томова",
                            LockoutEnabled = false,
                            NormalizedEmail = "A_TOMOVA@MC-BG.COM",
                            NormalizedUserName = "A_TOMOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEE0B8nAjCi0UKg6V1sdKPMMpAZkRp1NcIe8jjvfj9bORtfW7wV6sO8mec8ADasbQKg==",
                            PhoneNumber = "+359888888114",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "b6b6f593-65c1-444d-a978-be8a86d2f604",
                            TwoFactorEnabled = false,
                            UserName = "a_tomova"
                        },
                        new
                        {
                            Id = "041639c2-fcd2-4899-a5c6-2025cbb3c1c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "188ac354-7685-47fd-bccc-d80aabba18e8",
                            DoctorId = "9c85bdfe-768b-43bc-bc3d-91d3565edd7a",
                            Email = "k_moskova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Катерина",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Москова",
                            LockoutEnabled = false,
                            NormalizedEmail = "K_MOSKOVA@MC-BG.COM",
                            NormalizedUserName = "K_MOSKOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEACU/Kz1k4f0yasjvHpb8M7RgK4i0wJm0r1FwW7UV31mIyGgulVPyQjEN00N8hBv7A==",
                            PhoneNumber = "+359888888115",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "4ffae09e-07ff-4633-95ec-16923e5ac23c",
                            TwoFactorEnabled = false,
                            UserName = "k_moskova"
                        },
                        new
                        {
                            Id = "c83d8295-ff6a-4644-a44a-c2bc294b220e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a85376bb-6337-4151-a7f0-f752a8b21548",
                            DoctorId = "5b0923f7-da08-4af1-a391-d0561a534a42",
                            Email = "k_atanasova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Кристина",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Атанасова",
                            LockoutEnabled = false,
                            NormalizedEmail = "K_ATANASOVA@MC-BG.COM",
                            NormalizedUserName = "K_ATANASOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEEtzLb262KgxxpZ1Fn0lUFIOviPCRawBacC3XeVDRQEMkRcYjMXYaB8EDUaUZg6JVw==",
                            PhoneNumber = "+359888888116",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "ea4c772b-797c-4c8e-9792-da8d78c1f04a",
                            TwoFactorEnabled = false,
                            UserName = "k_atanasova"
                        },
                        new
                        {
                            Id = "8f052e1c-d7f5-40d4-9ee4-9c9f29a85ffe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "591ed979-60a2-4220-9710-d6563c6d7292",
                            DoctorId = "9e38d1b5-6ba5-4e49-bbf0-7d893dd5b040",
                            Email = "g_kuchukov@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Георги",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Кичуков",
                            LockoutEnabled = false,
                            NormalizedEmail = "G_KUCHUKOV@MC-BG.COM",
                            NormalizedUserName = "G_KUCHUKOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEII/FcE09SB1yJbOJ9MuaZeXsRGaQ+ywDPfDvDfiRZBdbst9B1ivJHjsIAsBBc0G6w==",
                            PhoneNumber = "+359888888117",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "2bae498f-1f60-456a-9f60-922ddb31bfb1",
                            TwoFactorEnabled = false,
                            UserName = "g_kuchukov"
                        },
                        new
                        {
                            Id = "a8d60b9c-6bef-4eff-af47-bcce7daf311b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28f44e53-654f-4307-bed0-5fb72e625654",
                            DoctorId = "992d83f0-1439-40dc-95f4-5a708fd3c086",
                            Email = "k_stoicheva@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Катина",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Стойчева",
                            LockoutEnabled = false,
                            NormalizedEmail = "K_STOICHEVA@MC-BG.COM",
                            NormalizedUserName = "K_STOICHEVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEMTJ5Jo9XI+x8BRAQQ0fLVqlIgnNaNz3maH3BSDQfEg79zQ9n//CeFe52+sRW0bBqA==",
                            PhoneNumber = "+359888888118",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "990387b2-aace-4291-a67e-5df1457cef75",
                            TwoFactorEnabled = false,
                            UserName = "k_stoicheva"
                        },
                        new
                        {
                            Id = "7c513995-bed0-4be3-b768-304cd697c3f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7bb236fb-8576-48eb-87b3-57837581d83e",
                            DoctorId = "cb55ad4a-e7c3-4cd6-8efb-6ccd3c369f4e",
                            Email = "n_paskov@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Николай",
                            GenderId = 1,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Пасков",
                            LockoutEnabled = false,
                            NormalizedEmail = "N_PASKOV@MC-BG.COM",
                            NormalizedUserName = "N_PASKOV",
                            PasswordHash = "AQAAAAEAACcQAAAAEMxpQ7xmI2MRuBQTF2sln5PIZsEiO6LHvYIM1yBghJgrWuKPPQhBGN23obgwMSXkvg==",
                            PhoneNumber = "+359888888119",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "2dfc3ba8-4981-4600-bdce-aac9dbf07b5f",
                            TwoFactorEnabled = false,
                            UserName = "n_paskov"
                        },
                        new
                        {
                            Id = "cd25b1ea-70c5-47d2-9617-3b7d0e6bc788",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ceb31c76-5ec0-4411-8d63-5d3f7d298831",
                            DoctorId = "be158f8c-bc22-4469-b01c-b9e928499a05",
                            Email = "r_uzunova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Росица",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Узунова",
                            LockoutEnabled = false,
                            NormalizedEmail = "R_UZUNOVA@MC-BG.COM",
                            NormalizedUserName = "R_UZUNOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEHDO9v/UwGL0JG1Ef/+OEGQFvbpl6vnaR1ZAmL3RR+gb7JxJoidWpzCErIw+LNxdvg==",
                            PhoneNumber = "+359888888120",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "eda90ba0-f0e8-4290-a151-35192c4607f9",
                            TwoFactorEnabled = false,
                            UserName = "r_uzunova"
                        },
                        new
                        {
                            Id = "734267e9-a59b-44c3-baee-7e52a2bd1c29",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd42f76a-3c74-4107-8ce1-3d3e39b36fc7",
                            DoctorId = "4be5615e-0d14-4756-a090-bd157133f463",
                            Email = "i_belcheva@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Ирина",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LastName = "Белчева",
                            LockoutEnabled = false,
                            NormalizedEmail = "I_BELCHEVA@MC-BG.COM",
                            NormalizedUserName = "I_BELCHEVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEAro/xOscSGTjHjCYhB5bm7vB/gdq7Bb2UMyP67eBl0CDL6dSgTMDq7V27qWgYhNxA==",
                            PhoneNumber = "+359888888121",
                            PhoneNumberConfirmed = false,
                            Role = "Doctor",
                            SecurityStamp = "7442ef24-e6b4-4658-b5e1-393ad3b3dd61",
                            TwoFactorEnabled = false,
                            UserName = "i_belcheva"
                        },
                        new
                        {
                            Id = "fb454478-8b7c-48bd-86b4-a0b36bf261a2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e9186b3-c56a-4544-a8af-11cef8c25579",
                            Email = "lab_vivanova@mc-bg.com",
                            EmailConfirmed = false,
                            FirstName = "Ваня",
                            GenderId = 2,
                            IsOutOfCompany = false,
                            JoinOnDate = "30.11.2022",
                            LaborantId = "fb454478-8b7c-48bd-86b4-a0b36bf261a2",
                            LastName = "Иванова",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAB_VIVANOVA@MC-BG.COM",
                            NormalizedUserName = "LAB_VIVANOVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEPnQgcnrRnpqoWKMzyYAlPeO/WQG6x9k19td3V6GS4b6ZN7DH5e0kTHPu4BhlqBSVg==",
                            PhoneNumber = "+359888888881",
                            PhoneNumberConfirmed = false,
                            Role = "Laborant",
                            SecurityStamp = "e001cb37-8332-4f01-9e48-ecbb925c0cb0",
                            TwoFactorEnabled = false,
                            UserName = "lab_vivanova"
                        });
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.WorkHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SheduleId");

                    b.ToTable("WorkHours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Hour = "08:00",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Hour = "08:30",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 3,
                            Hour = "09:00",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 4,
                            Hour = "09:30",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 5,
                            Hour = "10:00",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 6,
                            Hour = "10:30",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 7,
                            Hour = "11:00",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 8,
                            Hour = "11:30",
                            SheduleId = 1
                        },
                        new
                        {
                            Id = 9,
                            Hour = "13:00",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 10,
                            Hour = "13:30",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 11,
                            Hour = "14:00",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 12,
                            Hour = "14:30",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 13,
                            Hour = "15:00",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 14,
                            Hour = "15:30",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 15,
                            Hour = "16:00",
                            SheduleId = 2
                        },
                        new
                        {
                            Id = 16,
                            Hour = "16:30",
                            SheduleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "69d06a34-d864-4930-8a7d-f97055530db7",
                            ConcurrencyStamp = "0e7fe5bc-05ea-4ae6-9c5d-d6de2a596697",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "fd455a66-249b-4d16-b5a9-af8d92c6c231",
                            ConcurrencyStamp = "a15bd5cb-2f20-434e-a7e6-9eaa3734542d",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "f1321c5f-1fee-426a-833b-5d19cb9bdf42",
                            ConcurrencyStamp = "3ef01e46-488b-4684-8ffc-c96965566013",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "3ec20065-9336-4017-89d0-1ee96dc6e4ba",
                            ConcurrencyStamp = "572545c0-31c9-40ca-926d-435d7ec5be8f",
                            Name = "Laborant",
                            NormalizedName = "LABORANT"
                        },
                        new
                        {
                            Id = "6b894a41-5fec-4ca3-81eb-2038e01bcce0",
                            ConcurrencyStamp = "37b19683-20e0-4478-8bc0-a97cdd6a3dfb",
                            Name = "LaboratoryUser",
                            NormalizedName = "LABORATORYUSER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d026cf1f-a334-41f4-a1b7-31b7a56b9f1b",
                            RoleId = "69d06a34-d864-4930-8a7d-f97055530db7"
                        },
                        new
                        {
                            UserId = "9da9587f-e28e-4289-a559-7407d3ea34a5",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "79fb8276-3bf8-4e70-9ac3-0e53a0d3a29e",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "f1221132-3b9f-4f33-9e4d-1514bc0221e8",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "da3da29d-5411-4750-a5c4-e4ae4e22965c",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "b922fbb1-e1e8-41c6-a903-931e1cd4b845",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "3f9592ad-6af3-4021-808f-39d7aa9246e9",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "0bbf2307-d024-44b4-917f-a52ab9ddc013",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "cf6e7092-584c-460d-9538-feee4a5b53d9",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "f142f846-dbe7-420e-bbce-4a9f83e36980",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "d3ba8e2c-1f0f-4879-86b0-372d1b0bc760",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "8c1bcbb9-96f4-4e4e-8ec2-fc26fb79ddca",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "095da4be-9891-4cd9-a2ad-05dbbb0e2085",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "b67a1365-3902-4728-8c9f-05369b1556b7",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "f092f500-00e2-4544-952a-4cb91320558d",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "c8517d67-c0f3-4cb8-ac8c-96602aaad8bb",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "041639c2-fcd2-4899-a5c6-2025cbb3c1c7",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "c83d8295-ff6a-4644-a44a-c2bc294b220e",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "8f052e1c-d7f5-40d4-9ee4-9c9f29a85ffe",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "a8d60b9c-6bef-4eff-af47-bcce7daf311b",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "7c513995-bed0-4be3-b768-304cd697c3f9",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "cd25b1ea-70c5-47d2-9617-3b7d0e6bc788",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "734267e9-a59b-44c3-baee-7e52a2bd1c29",
                            RoleId = "fd455a66-249b-4d16-b5a9-af8d92c6c231"
                        },
                        new
                        {
                            UserId = "fb454478-8b7c-48bd-86b4-a0b36bf261a2",
                            RoleId = "3ec20065-9336-4017-89d0-1ee96dc6e4ba"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Administrator", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithOne("Administrator")
                        .HasForeignKey("MedicalCenter.Infrastructure.Data.Models.Administrator", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Doctor", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Shedule", "Shedule")
                        .WithMany("Doctors")
                        .HasForeignKey("SheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Specialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("MedicalCenter.Infrastructure.Data.Models.Doctor", "UserId");

                    b.Navigation("Shedule");

                    b.Navigation("Specialty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Examination", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorExaminations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId");

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Shedule", "Shedule")
                        .WithMany()
                        .HasForeignKey("SheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithMany("UserExaminations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Review");

                    b.Navigation("Shedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Laborant", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithOne("Laborant")
                        .HasForeignKey("MedicalCenter.Infrastructure.Data.Models.Laborant", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.LaboratoryPatient", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithOne("LaboratoryPatient")
                        .HasForeignKey("MedicalCenter.Infrastructure.Data.Models.LaboratoryPatient", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Review", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Doctor", "Doctor")
                        .WithMany("DoctorReviews")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", "User")
                        .WithMany("UserReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Test", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.LaboratoryPatient", "LaboratoryPatient")
                        .WithMany("Tests")
                        .HasForeignKey("LaboratoryPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaboratoryPatient");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.WorkHour", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.Shedule", "Shedule")
                        .WithMany("WorkHours")
                        .HasForeignKey("SheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Shedule");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MedicalCenter.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Doctor", b =>
                {
                    b.Navigation("DoctorExaminations");

                    b.Navigation("DoctorReviews");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.LaboratoryPatient", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Shedule", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("WorkHours");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.Specialty", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("MedicalCenter.Infrastructure.Data.Models.User", b =>
                {
                    b.Navigation("Administrator");

                    b.Navigation("Doctor");

                    b.Navigation("Laborant");

                    b.Navigation("LaboratoryPatient");

                    b.Navigation("UserExaminations");

                    b.Navigation("UserReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
